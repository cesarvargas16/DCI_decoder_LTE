#
# A new csv file Trace_DATE_with_id.csv is created which contains the information carried by the DCI
# messages. In the Trace_DATE_with_id.csv file, each row represents a DCI message, and the columns include the
# following features:
# • Time: Unix timestamp in milliseconds
# • rnti: Radio Network Temporary Identifier (RNTI) associated with the DCI
# • SFN: system frame number
# • format: DCI format (0: format0, 2: format1A, 6: format2)
# • preamble: random access preamble
# • ta: first timing advance
# • nb_TB: number of enabled transport blocks (TB)
# • MCSi_1: Modulation Coding Scheme (MCS) index of the first transport block (-2: TB is disabled )
# • MCSi_2: MCS index of the second transport block (-2: TB is disabled )
# • TBS_1: TBS of first transport block (-2: TB is disabled )
# • TBS_2: TBS of second transport block (-2: TB is disabled )
# • nb_PRB: number of allocated PRBs
# • connection_id: unique connection identifier

# The RNTIs values 5, 65534, and 65535 are reserved for random access, paging messages, and system
# information. These values correspond to connection_id = {1, 2, 3}. These values should not be
# considered as connections established by the terminals. DCI format 0 is used for uplink and DCI format
# 1A and 2 for downlink.


import numpy as np
import csv
import math
import time
import pandas as pd
import os
import sys
import argparse



################################################################################
#
#                     Trace parameters to configure
#
################################################################################

# TraceName = "Trace20221014_160719"
# earfcn = 900

# TraceName = "Trace20231023_164854"
# earfcn = 6200



#################################################################################

# ----------------- Parameters to configure (optional)  --------------------------
# LTE parameters
inactivity_timer = 20000  # in milliseconds
altCQI_table_r12 = True  # 3GPP rel12
is_tdd = False

# Filter histogram parameters
activity_wds = 250

# ----------------  Fixed parameters  ----------------------------
si_rnti = 65535
p_rnti = 65534

# ------------------ Analysis configuration ----------------
time_correction_phase = True
decoding_dci_phase = True
histogram_filter_phase = True
adding_connection_id = True

# --------------------------- o ------------------------------

# formats
SRSLTE_DCI_FORMAT0 = 0
SRSLTE_DCI_FORMAT1 = 1
SRSLTE_DCI_FORMAT1A = 2
SRSLTE_DCI_FORMAT1C = 3
SRSLTE_DCI_FORMAT1B = 4
SRSLTE_DCI_FORMAT1D = 5
SRSLTE_DCI_FORMAT2 = 6
SRSLTE_DCI_FORMAT2A = 7
SRSLTE_DCI_FORMAT2B = 8

# For decoder
# Definitions
ERROR_DCI = -2

# Modulation levels
MOD_BPSK = 1
MOD_QPSK = 2
MOD_16QAM = 4
MOD_64QAM = 6
MOD_256QAM = 8

#  For modulation and TBS index table for PDSCH
#  36.213 - Rel 13, Table 7.1.7.1-1 and Table 7.1.7.1-1A
TBS_index_33A = 330
TBS_index_26A = 330


# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#
#                                   DCI decoding functions
#
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# #################################################################################
#
#                                   Tables
# #################################################################################

tbs_format1c_table = [40, 56, 72, 120, 136, 144, 176, 208, 224, 256, 280, 296, 328,
                      336, 392, 488, 552, 600, 632, 696, 776, 840, 904, 1000, 1064,
                      1128, 1224, 1288, 1384, 1480, 1608, 1736]

# Table 7.1.7.2.1-1: Transport block size table, 3GPP 36.213 Rel10
tbs_table = [[16, 32, 56, 88, 120, 152, 176, 208, 224, 256, 288,
              328, 344, 376, 392, 424, 456, 488, 504, 536, 568, 600,
              616, 648, 680, 712, 744, 776, 776, 808, 840, 872, 904,
              936, 968, 1000, 1032, 1032, 1064, 1096, 1128, 1160, 1192, 1224,
              1256, 1256, 1288, 1320, 1352, 1384, 1416, 1416, 1480, 1480, 1544,
              1544, 1608, 1608, 1608, 1672, 1672, 1736, 1736, 1800, 1800, 1800,
              1864, 1864, 1928, 1928, 1992, 1992, 2024, 2088, 2088, 2088, 2152,
              2152, 2216, 2216, 2280, 2280, 2280, 2344, 2344, 2408, 2408, 2472,
              2472, 2536, 2536, 2536, 2600, 2600, 2664, 2664, 2728, 2728, 2728,
              2792, 2792, 2856, 2856, 2856, 2984, 2984, 2984, 2984, 2984, 3112],
             [24, 56, 88, 144, 176, 208, 224, 256, 328, 344, 376,
              424, 456, 488, 520, 568, 600, 632, 680, 712, 744, 776,
              808, 872, 904, 936, 968, 1000, 1032, 1064, 1128, 1160, 1192,
              1224, 1256, 1288, 1352, 1384, 1416, 1416, 1480, 1544, 1544, 1608,
              1608, 1672, 1736, 1736, 1800, 1800, 1864, 1864, 1928, 1992, 1992,
              2024, 2088, 2088, 2152, 2152, 2216, 2280, 2280, 2344, 2344, 2408,
              2472, 2472, 2536, 2536, 2600, 2600, 2664, 2728, 2728, 2792, 2792,
              2856, 2856, 2856, 2984, 2984, 2984, 3112, 3112, 3112, 3240, 3240,
              3240, 3240, 3368, 3368, 3368, 3496, 3496, 3496, 3496, 3624, 3624,
              3624, 3752, 3752, 3752, 3752, 3880, 3880, 3880, 4008, 4008, 4008],
             [32, 72, 144, 176, 208, 256, 296, 328, 376, 424, 472,
              520, 568, 616, 648, 696, 744, 776, 840, 872, 936, 968,
              1000, 1064, 1096, 1160, 1192, 1256, 1288, 1320, 1384, 1416, 1480,
              1544, 1544, 1608, 1672, 1672, 1736, 1800, 1800, 1864, 1928, 1992,
              2024, 2088, 2088, 2152, 2216, 2216, 2280, 2344, 2344, 2408, 2472,
              2536, 2536, 2600, 2664, 2664, 2728, 2792, 2856, 2856, 2856, 2984,
              2984, 3112, 3112, 3112, 3240, 3240, 3240, 3368, 3368, 3368, 3496,
              3496, 3496, 3624, 3624, 3624, 3752, 3752, 3880, 3880, 3880, 4008,
              4008, 4008, 4136, 4136, 4136, 4264, 4264, 4264, 4392, 4392, 4392,
              4584, 4584, 4584, 4584, 4584, 4776, 4776, 4776, 4776, 4968, 4968],
             [40, 104, 176, 208, 256, 328, 392, 440, 504, 568, 616,
              680, 744, 808, 872, 904, 968, 1032, 1096, 1160, 1224, 1256,
              1320, 1384, 1416, 1480, 1544, 1608, 1672, 1736, 1800, 1864, 1928,
              1992, 2024, 2088, 2152, 2216, 2280, 2344, 2408, 2472, 2536, 2536,
              2600, 2664, 2728, 2792, 2856, 2856, 2984, 2984, 3112, 3112, 3240,
              3240, 3368, 3368, 3496, 3496, 3624, 3624, 3624, 3752, 3752, 3880,
              3880, 4008, 4008, 4136, 4136, 4264, 4264, 4392, 4392, 4392, 4584,
              4584, 4584, 4776, 4776, 4776, 4776, 4968, 4968, 4968, 5160, 5160,
              5160, 5352, 5352, 5352, 5352, 5544, 5544, 5544, 5736, 5736, 5736,
              5736, 5992, 5992, 5992, 5992, 6200, 6200, 6200, 6200, 6456, 6456],
             [56, 120, 208, 256, 328, 408, 488, 552, 632, 696, 776,
              840, 904, 1000, 1064, 1128, 1192, 1288, 1352, 1416, 1480, 1544,
              1608, 1736, 1800, 1864, 1928, 1992, 2088, 2152, 2216, 2280, 2344,
              2408, 2472, 2600, 2664, 2728, 2792, 2856, 2984, 2984, 3112, 3112,
              3240, 3240, 3368, 3496, 3496, 3624, 3624, 3752, 3752, 3880, 4008,
              4008, 4136, 4136, 4264, 4264, 4392, 4392, 4584, 4584, 4584, 4776,
              4776, 4968, 4968, 4968, 5160, 5160, 5160, 5352, 5352, 5544, 5544,
              5544, 5736, 5736, 5736, 5992, 5992, 5992, 5992, 6200, 6200, 6200,
              6456, 6456, 6456, 6456, 6712, 6712, 6712, 6968, 6968, 6968, 6968,
              7224, 7224, 7224, 7480, 7480, 7480, 7480, 7736, 7736, 7736, 7992],
             [72, 144, 224, 328, 424, 504, 600, 680, 776, 872, 968,
              1032, 1128, 1224, 1320, 1384, 1480, 1544, 1672, 1736, 1864, 1928,
              2024, 2088, 2216, 2280, 2344, 2472, 2536, 2664, 2728, 2792, 2856,
              2984, 3112, 3112, 3240, 3368, 3496, 3496, 3624, 3752, 3752, 3880,
              4008, 4008, 4136, 4264, 4392, 4392, 4584, 4584, 4776, 4776, 4776,
              4968, 4968, 5160, 5160, 5352, 5352, 5544, 5544, 5736, 5736, 5736,
              5992, 5992, 5992, 6200, 6200, 6200, 6456, 6456, 6712, 6712, 6712,
              6968, 6968, 6968, 7224, 7224, 7224, 7480, 7480, 7480, 7736, 7736,
              7736, 7992, 7992, 7992, 8248, 8248, 8248, 8504, 8504, 8760, 8760,
              8760, 8760, 9144, 9144, 9144, 9144, 9528, 9528, 9528, 9528, 9528],
             [328, 176, 256, 392, 504, 600, 712, 808, 936, 1032, 1128,
              1224, 1352, 1480, 1544, 1672, 1736, 1864, 1992, 2088, 2216, 2280,
              2408, 2472, 2600, 2728, 2792, 2984, 2984, 3112, 3240, 3368, 3496,
              3496, 3624, 3752, 3880, 4008, 4136, 4136, 4264, 4392, 4584, 4584,
              4776, 4776, 4968, 4968, 5160, 5160, 5352, 5352, 5544, 5736, 5736,
              5992, 5992, 5992, 6200, 6200, 6456, 6456, 6456, 6712, 6712, 6968,
              6968, 6968, 7224, 7224, 7480, 7480, 7736, 7736, 7736, 7992, 7992,
              8248, 8248, 8248, 8504, 8504, 8760, 8760, 8760, 9144, 9144, 9144,
              9144, 9528, 9528, 9528, 9528, 9912, 9912, 9912, 10296, 10296, 10296,
              10296, 10680, 10680, 10680, 10680, 11064, 11064, 11064, 11448, 11448, 11448],
             [104, 224, 328, 472, 584, 712, 840, 968, 1096, 1224, 1320,
              1480, 1608, 1672, 1800, 1928, 2088, 2216, 2344, 2472, 2536, 2664,
              2792, 2984, 3112, 3240, 3368, 3368, 3496, 3624, 3752, 3880, 4008,
              4136, 4264, 4392, 4584, 4584, 4776, 4968, 4968, 5160, 5352, 5352,
              5544, 5736, 5736, 5992, 5992, 6200, 6200, 6456, 6456, 6712, 6712,
              6712, 6968, 6968, 7224, 7224, 7480, 7480, 7736, 7736, 7992, 7992,
              8248, 8248, 8504, 8504, 8760, 8760, 8760, 9144, 9144, 9144, 9528,
              9528, 9528, 9912, 9912, 9912, 10296, 10296, 10296, 10680, 10680, 10680,
              11064, 11064, 11064, 11448, 11448, 11448, 11448, 11832, 11832, 11832, 12216,
              12216, 12216, 12576, 12576, 12576, 12960, 12960, 12960, 12960, 13536, 13536],
             [120, 256, 392, 536, 680, 808, 968, 1096, 1256, 1384, 1544,
              1672, 1800, 1928, 2088, 2216, 2344, 2536, 2664, 2792, 2984, 3112,
              3240, 3368, 3496, 3624, 3752, 3880, 4008, 4264, 4392, 4584, 4584,
              4776, 4968, 4968, 5160, 5352, 5544, 5544, 5736, 5992, 5992, 6200,
              6200, 6456, 6456, 6712, 6968, 6968, 7224, 7224, 7480, 7480, 7736,
              7736, 7992, 7992, 8248, 8504, 8504, 8760, 8760, 9144, 9144, 9144,
              9528, 9528, 9528, 9912, 9912, 9912, 10296, 10296, 10680, 10680, 10680,
              11064, 11064, 11064, 11448, 11448, 11448, 11832, 11832, 12216, 12216, 12216,
              12576, 12576, 12576, 12960, 12960, 12960, 13536, 13536, 13536, 13536, 14112,
              14112, 14112, 14112, 14688, 14688, 14688, 14688, 15264, 15264, 15264, 15264],
             [136, 296, 456, 616, 776, 936, 1096, 1256, 1416, 1544, 1736,
              1864, 2024, 2216, 2344, 2536, 2664, 2856, 2984, 3112, 3368, 3496,
              3624, 3752, 4008, 4136, 4264, 4392, 4584, 4776, 4968, 5160, 5160,
              5352, 5544, 5736, 5736, 5992, 6200, 6200, 6456, 6712, 6712, 6968,
              6968, 7224, 7480, 7480, 7736, 7992, 7992, 8248, 8248, 8504, 8760,
              8760, 9144, 9144, 9144, 9528, 9528, 9912, 9912, 10296, 10296, 10296,
              10680, 10680, 11064, 11064, 11064, 11448, 11448, 11832, 11832, 11832, 12216,
              12216, 12576, 12576, 12960, 12960, 12960, 13536, 13536, 13536, 13536, 14112,
              14112, 14112, 14112, 14688, 14688, 14688, 15264, 15264, 15264, 15264, 15840,
              15840, 15840, 16416, 16416, 16416, 16416, 16992, 16992, 16992, 16992, 17568],
             [144, 328, 504, 680, 872, 1032, 1224, 1384, 1544, 1736, 1928,
              2088, 2280, 2472, 2664, 2792, 2984, 3112, 3368, 3496, 3752, 3880,
              4008, 4264, 4392, 4584, 4776, 4968, 5160, 5352, 5544, 5736, 5736,
              5992, 6200, 6200, 6456, 6712, 6712, 6968, 7224, 7480, 7480, 7736,
              7992, 7992, 8248, 8504, 8504, 8760, 9144, 9144, 9144, 9528, 9528,
              9912, 9912, 10296, 10296, 10680, 10680, 11064, 11064, 11448, 11448, 11448,
              11832, 11832, 12216, 12216, 12576, 12576, 12960, 12960, 12960, 13536, 13536,
              13536, 14112, 14112, 14112, 14688, 14688, 14688, 14688, 15264, 15264, 15264,
              15840, 15840, 15840, 16416, 16416, 16416, 16992, 16992, 16992, 16992, 17568,
              17568, 17568, 18336, 18336, 18336, 18336, 18336, 19080, 19080, 19080, 19080],
             [176, 376, 584, 776, 1000, 1192, 1384, 1608, 1800, 2024, 2216,
              2408, 2600, 2792, 2984, 3240, 3496, 3624, 3880, 4008, 4264, 4392,
              4584, 4776, 4968, 5352, 5544, 5736, 5992, 5992, 6200, 6456, 6712,
              6968, 6968, 7224, 7480, 7736, 7736, 7992, 8248, 8504, 8760, 8760,
              9144, 9144, 9528, 9528, 9912, 9912, 10296, 10680, 10680, 11064, 11064,
              11448, 11448, 11832, 11832, 12216, 12216, 12576, 12576, 12960, 12960, 13536,
              13536, 13536, 14112, 14112, 14112, 14688, 14688, 14688, 15264, 15264, 15840,
              15840, 15840, 16416, 16416, 16416, 16992, 16992, 16992, 17568, 17568, 17568,
              18336, 18336, 18336, 18336, 19080, 19080, 19080, 19080, 19848, 19848, 19848,
              19848, 20616, 20616, 20616, 21384, 21384, 21384, 21384, 22152, 22152, 22152],
             [208, 440, 680, 904, 1128, 1352, 1608, 1800, 2024, 2280, 2472,
              2728, 2984, 3240, 3368, 3624, 3880, 4136, 4392, 4584, 4776, 4968,
              5352, 5544, 5736, 5992, 6200, 6456, 6712, 6712, 6968, 7224, 7480,
              7736, 7992, 8248, 8504, 8760, 8760, 9144, 9528, 9528, 9912, 9912,
              10296, 10680, 10680, 11064, 11064, 11448, 11832, 11832, 12216, 12216, 12576,
              12576, 12960, 12960, 13536, 13536, 14112, 14112, 14112, 14688, 14688, 15264,
              15264, 15264, 15840, 15840, 16416, 16416, 16416, 16992, 16992, 17568, 17568,
              17568, 18336, 18336, 18336, 19080, 19080, 19080, 19080, 19848, 19848, 19848,
              20616, 20616, 20616, 21384, 21384, 21384, 21384, 22152, 22152, 22152, 22920,
              22920, 22920, 23688, 23688, 23688, 23688, 24496, 24496, 24496, 24496, 25456],
             [224, 488, 744, 1000, 1256, 1544, 1800, 2024, 2280, 2536, 2856,
              3112, 3368, 3624, 3880, 4136, 4392, 4584, 4968, 5160, 5352, 5736,
              5992, 6200, 6456, 6712, 6968, 7224, 7480, 7736, 7992, 8248, 8504,
              8760, 9144, 9144, 9528, 9912, 9912, 10296, 10680, 10680, 11064, 11448,
              11448, 11832, 12216, 12216, 12576, 12960, 12960, 13536, 13536, 14112, 14112,
              14688, 14688, 14688, 15264, 15264, 15840, 15840, 16416, 16416, 16992, 16992,
              16992, 17568, 17568, 18336, 18336, 18336, 19080, 19080, 19080, 19848, 19848,
              19848, 20616, 20616, 20616, 21384, 21384, 21384, 22152, 22152, 22152, 22920,
              22920, 22920, 23688, 23688, 23688, 24496, 24496, 24496, 25456, 25456, 25456,
              25456, 26416, 26416, 26416, 26416, 27376, 27376, 27376, 27376, 28336, 28336],
             [256, 552, 840, 1128, 1416, 1736, 1992, 2280, 2600, 2856, 3112,
              3496, 3752, 4008, 4264, 4584, 4968, 5160, 5544, 5736, 5992, 6200,
              6456, 6968, 7224, 7480, 7736, 7992, 8248, 8504, 8760, 9144, 9528,
              9912, 9912, 10296, 10680, 11064, 11064, 11448, 11832, 12216, 12216, 12576,
              12960, 12960, 13536, 13536, 14112, 14112, 14688, 14688, 15264, 15264, 15840,
              15840, 16416, 16416, 16992, 16992, 17568, 17568, 18336, 18336, 18336, 19080,
              19080, 19848, 19848, 19848, 20616, 20616, 20616, 21384, 21384, 22152, 22152,
              22152, 22920, 22920, 22920, 23688, 23688, 24496, 24496, 24496, 25456, 25456,
              25456, 25456, 26416, 26416, 26416, 27376, 27376, 27376, 28336, 28336, 28336,
              28336, 29296, 29296, 29296, 29296, 30576, 30576, 30576, 30576, 31704, 31704],
             [280, 600, 904, 1224, 1544, 1800, 2152, 2472, 2728, 3112, 3368,
              3624, 4008, 4264, 4584, 4968, 5160, 5544, 5736, 6200, 6456, 6712,
              6968, 7224, 7736, 7992, 8248, 8504, 8760, 9144, 9528, 9912, 10296,
              10296, 10680, 11064, 11448, 11832, 11832, 12216, 12576, 12960, 12960, 13536,
              13536, 14112, 14688, 14688, 15264, 15264, 15840, 15840, 16416, 16416, 16992,
              16992, 17568, 17568, 18336, 18336, 18336, 19080, 19080, 19848, 19848, 20616,
              20616, 20616, 21384, 21384, 22152, 22152, 22152, 22920, 22920, 23688, 23688,
              23688, 24496, 24496, 24496, 25456, 25456, 25456, 26416, 26416, 26416, 27376,
              27376, 27376, 28336, 28336, 28336, 29296, 29296, 29296, 29296, 30576, 30576,
              30576, 30576, 31704, 31704, 31704, 31704, 32856, 32856, 32856, 34008, 34008],
             [328, 632, 968, 1288, 1608, 1928, 2280, 2600, 2984, 3240, 3624,
              3880, 4264, 4584, 4968, 5160, 5544, 5992, 6200, 6456, 6712, 7224,
              7480, 7736, 7992, 8504, 8760, 9144, 9528, 9912, 9912, 10296, 10680,
              11064, 11448, 11832, 12216, 12216, 12576, 12960, 13536, 13536, 14112, 14112,
              14688, 14688, 15264, 15840, 15840, 16416, 16416, 16992, 16992, 17568, 17568,
              18336, 18336, 19080, 19080, 19848, 19848, 19848, 20616, 20616, 21384, 21384,
              22152, 22152, 22152, 22920, 22920, 23688, 23688, 24496, 24496, 24496, 25456,
              25456, 25456, 26416, 26416, 26416, 27376, 27376, 27376, 28336, 28336, 28336,
              29296, 29296, 29296, 30576, 30576, 30576, 30576, 31704, 31704, 31704, 31704,
              32856, 32856, 32856, 34008, 34008, 34008, 34008, 35160, 35160, 35160, 35160],
             [336, 696, 1064, 1416, 1800, 2152, 2536, 2856, 3240, 3624, 4008,
              4392, 4776, 5160, 5352, 5736, 6200, 6456, 6712, 7224, 7480, 7992,
              8248, 8760, 9144, 9528, 9912, 10296, 10296, 10680, 11064, 11448, 11832,
              12216, 12576, 12960, 13536, 13536, 14112, 14688, 14688, 15264, 15264, 15840,
              16416, 16416, 16992, 17568, 17568, 18336, 18336, 19080, 19080, 19848, 19848,
              20616, 20616, 20616, 21384, 21384, 22152, 22152, 22920, 22920, 23688, 23688,
              24496, 24496, 24496, 25456, 25456, 26416, 26416, 26416, 27376, 27376, 27376,
              28336, 28336, 29296, 29296, 29296, 30576, 30576, 30576, 30576, 31704, 31704,
              31704, 32856, 32856, 32856, 34008, 34008, 34008, 35160, 35160, 35160, 35160,
              36696, 36696, 36696, 36696, 37888, 37888, 37888, 39232, 39232, 39232, 39232],
             [376, 776, 1160, 1544, 1992, 2344, 2792, 3112, 3624, 4008, 4392,
              4776, 5160, 5544, 5992, 6200, 6712, 7224, 7480, 7992, 8248, 8760,
              9144, 9528, 9912, 10296, 10680, 11064, 11448, 11832, 12216, 12576, 12960,
              13536, 14112, 14112, 14688, 15264, 15264, 15840, 16416, 16416, 16992, 17568,
              17568, 18336, 18336, 19080, 19080, 19848, 19848, 20616, 21384, 21384, 22152,
              22152, 22920, 22920, 23688, 23688, 24496, 24496, 24496, 25456, 25456, 26416,
              26416, 27376, 27376, 27376, 28336, 28336, 29296, 29296, 29296, 30576, 30576,
              30576, 31704, 31704, 31704, 32856, 32856, 32856, 34008, 34008, 34008, 35160,
              35160, 35160, 36696, 36696, 36696, 37888, 37888, 37888, 37888, 39232, 39232,
              39232, 40576, 40576, 40576, 40576, 42368, 42368, 42368, 42368, 43816, 43816],
             [408, 840, 1288, 1736, 2152, 2600, 2984, 3496, 3880, 4264, 4776,
              5160, 5544, 5992, 6456, 6968, 7224, 7736, 8248, 8504, 9144, 9528,
              9912, 10296, 10680, 11064, 11448, 12216, 12576, 12960, 13536, 13536, 14112,
              14688, 15264, 15264, 15840, 16416, 16992, 16992, 17568, 18336, 18336, 19080,
              19080, 19848, 20616, 20616, 21384, 21384, 22152, 22152, 22920, 22920, 23688,
              24496, 24496, 25456, 25456, 25456, 26416, 26416, 27376, 27376, 28336, 28336,
              29296, 29296, 29296, 30576, 30576, 30576, 31704, 31704, 32856, 32856, 32856,
              34008, 34008, 34008, 35160, 35160, 35160, 36696, 36696, 36696, 37888, 37888,
              37888, 39232, 39232, 39232, 40576, 40576, 40576, 40576, 42368, 42368, 42368,
              43816, 43816, 43816, 43816, 45352, 45352, 45352, 46888, 46888, 46888, 46888],
             [440, 904, 1384, 1864, 2344, 2792, 3240, 3752, 4136, 4584, 5160,
              5544, 5992, 6456, 6968, 7480, 7992, 8248, 8760, 9144, 9912, 10296,
              10680, 11064, 11448, 12216, 12576, 12960, 13536, 14112, 14688, 14688, 15264,
              15840, 16416, 16992, 16992, 17568, 18336, 18336, 19080, 19848, 19848, 20616,
              20616, 21384, 22152, 22152, 22920, 22920, 23688, 24496, 24496, 25456, 25456,
              26416, 26416, 27376, 27376, 28336, 28336, 29296, 29296, 29296, 30576, 30576,
              31704, 31704, 31704, 32856, 32856, 34008, 34008, 34008, 35160, 35160, 35160,
              36696, 36696, 36696, 37888, 37888, 39232, 39232, 39232, 40576, 40576, 40576,
              42368, 42368, 42368, 42368, 43816, 43816, 43816, 45352, 45352, 45352, 46888,
              46888, 46888, 46888, 48936, 48936, 48936, 48936, 48936, 51024, 51024, 51024],
             [488, 1000, 1480, 1992, 2472, 2984, 3496, 4008, 4584, 4968, 5544,
              5992, 6456, 6968, 7480, 7992, 8504, 9144, 9528, 9912, 10680, 11064,
              11448, 12216, 12576, 12960, 13536, 14112, 14688, 15264, 15840, 15840, 16416,
              16992, 17568, 18336, 18336, 19080, 19848, 19848, 20616, 21384, 21384, 22152,
              22920, 22920, 23688, 24496, 24496, 25456, 25456, 26416, 26416, 27376, 27376,
              28336, 28336, 29296, 29296, 30576, 30576, 31704, 31704, 31704, 32856, 32856,
              34008, 34008, 35160, 35160, 35160, 36696, 36696, 36696, 37888, 37888, 39232,
              39232, 39232, 40576, 40576, 40576, 42368, 42368, 42368, 43816, 43816, 43816,
              45352, 45352, 45352, 46888, 46888, 46888, 46888, 48936, 48936, 48936, 48936,
              51024, 51024, 51024, 51024, 52752, 52752, 52752, 52752, 55056, 55056, 55056],
             [520, 1064, 1608, 2152, 2664, 3240, 3752, 4264, 4776, 5352, 5992,
              6456, 6968, 7480, 7992, 8504, 9144, 9528, 10296, 10680, 11448, 11832,
              12576, 12960, 13536, 14112, 14688, 15264, 15840, 16416, 16992, 16992, 17568,
              18336, 19080, 19080, 19848, 20616, 21384, 21384, 22152, 22920, 22920, 23688,
              24496, 24496, 25456, 25456, 26416, 27376, 27376, 28336, 28336, 29296, 29296,
              30576, 30576, 31704, 31704, 32856, 32856, 34008, 34008, 34008, 35160, 35160,
              36696, 36696, 36696, 37888, 37888, 39232, 39232, 40576, 40576, 40576, 42368,
              42368, 42368, 43816, 43816, 43816, 45352, 45352, 45352, 46888, 46888, 46888,
              48936, 48936, 48936, 48936, 51024, 51024, 51024, 51024, 52752, 52752, 52752,
              55056, 55056, 55056, 55056, 57336, 57336, 57336, 57336, 59256, 59256, 59256],
             [552, 1128, 1736, 2280, 2856, 3496, 4008, 4584, 5160, 5736, 6200,
              6968, 7480, 7992, 8504, 9144, 9912, 10296, 11064, 11448, 12216, 12576,
              12960, 13536, 14112, 14688, 15264, 15840, 16416, 16992, 17568, 18336, 19080,
              19848, 19848, 20616, 21384, 22152, 22152, 22920, 23688, 24496, 24496, 25456,
              25456, 26416, 27376, 27376, 28336, 28336, 29296, 29296, 30576, 30576, 31704,
              31704, 32856, 32856, 34008, 34008, 35160, 35160, 36696, 36696, 37888, 37888,
              37888, 39232, 39232, 40576, 40576, 40576, 42368, 42368, 43816, 43816, 43816,
              45352, 45352, 45352, 46888, 46888, 46888, 48936, 48936, 48936, 51024, 51024,
              51024, 51024, 52752, 52752, 52752, 55056, 55056, 55056, 55056, 57336, 57336,
              57336, 57336, 59256, 59256, 59256, 59256, 61664, 61664, 61664, 61664, 63776],
             [584, 1192, 1800, 2408, 2984, 3624, 4264, 4968, 5544, 5992, 6712,
              7224, 7992, 8504, 9144, 9912, 10296, 11064, 11448, 12216, 12960, 13536,
              14112, 14688, 15264, 15840, 16416, 16992, 17568, 18336, 19080, 19848, 19848,
              20616, 21384, 22152, 22920, 22920, 23688, 24496, 25456, 25456, 26416, 26416,
              27376, 28336, 28336, 29296, 29296, 30576, 31704, 31704, 32856, 32856, 34008,
              34008, 35160, 35160, 36696, 36696, 36696, 37888, 37888, 39232, 39232, 40576,
              40576, 42368, 42368, 42368, 43816, 43816, 45352, 45352, 45352, 46888, 46888,
              46888, 48936, 48936, 48936, 51024, 51024, 51024, 52752, 52752, 52752, 52752,
              55056, 55056, 55056, 57336, 57336, 57336, 57336, 59256, 59256, 59256, 61664,
              61664, 61664, 61664, 63776, 63776, 63776, 63776, 66592, 66592, 66592, 66592],
             [616, 1256, 1864, 2536, 3112, 3752, 4392, 5160, 5736, 6200, 6968,
              7480, 8248, 8760, 9528, 10296, 10680, 11448, 12216, 12576, 13536, 14112,
              14688, 15264, 15840, 16416, 16992, 17568, 18336, 19080, 19848, 20616, 20616,
              21384, 22152, 22920, 23688, 24496, 24496, 25456, 26416, 26416, 27376, 28336,
              28336, 29296, 29296, 30576, 31704, 31704, 32856, 32856, 34008, 34008, 35160,
              35160, 36696, 36696, 37888, 37888, 39232, 39232, 40576, 40576, 40576, 42368,
              42368, 43816, 43816, 43816, 45352, 45352, 46888, 46888, 46888, 48936, 48936,
              48936, 51024, 51024, 51024, 52752, 52752, 52752, 55056, 55056, 55056, 55056,
              57336, 57336, 57336, 59256, 59256, 59256, 61664, 61664, 61664, 61664, 63776,
              63776, 63776, 63776, 66592, 66592, 66592, 66592, 68808, 68808, 68808, 71112],
             [712, 1480, 2216, 2984, 3752, 4392, 5160, 5992, 6712, 7480, 8248,
              8760, 9528, 10296, 11064, 11832, 12576, 13536, 14112, 14688, 15264, 16416,
              16992, 17568, 18336, 19080, 19848, 20616, 21384, 22152, 22920, 23688, 24496,
              25456, 25456, 26416, 27376, 28336, 29296, 29296, 30576, 30576, 31704, 32856,
              32856, 34008, 35160, 35160, 36696, 36696, 37888, 37888, 39232, 40576, 40576,
              40576, 42368, 42368, 43816, 43816, 45352, 45352, 46888, 46888, 48936, 48936,
              48936, 51024, 51024, 52752, 52752, 52752, 55056, 55056, 55056, 55056, 57336,
              57336, 57336, 59256, 59256, 59256, 61664, 61664, 61664, 63776, 63776, 63776,
              66592, 66592, 66592, 68808, 68808, 68808, 71112, 71112, 71112, 73712, 73712,
              75376, 75376, 75376, 75376, 75376, 75376, 75376, 75376, 75376, 75376, 75376]]

# Table 7.1.7.2.1-1: Transport block size table, 3GPP 36.213 Rel13
tbs_table_2 = [[16, 32, 56, 88, 120, 152, 176, 208, 224, 256, 288,
                328, 344, 376, 392, 424, 456, 488, 504, 536, 568, 600,
                616, 648, 680, 712, 744, 776, 776, 808, 840, 872, 904,
                936, 968, 1000, 1032, 1032, 1064, 1096, 1128, 1160, 1192, 1224,
                1256, 1256, 1288, 1320, 1352, 1384, 1416, 1416, 1480, 1480, 1544,
                1544, 1608, 1608, 1608, 1672, 1672, 1736, 1736, 1800, 1800, 1800,
                1864, 1864, 1928, 1928, 1992, 1992, 2024, 2088, 2088, 2088, 2152,
                2152, 2216, 2216, 2280, 2280, 2280, 2344, 2344, 2408, 2408, 2472,
                2472, 2536, 2536, 2536, 2600, 2600, 2664, 2664, 2728, 2728, 2728,
                2792, 2792, 2856, 2856, 2856, 2984, 2984, 2984, 2984, 2984, 3112],
               [24, 56, 88, 144, 176, 208, 224, 256, 328, 344, 376,
               424, 456, 488, 520, 568, 600, 632, 680, 712, 744, 776,
               808, 872, 904, 936, 968, 1000, 1032, 1064, 1128, 1160, 1192,
               1224, 1256, 1288, 1352, 1384, 1416, 1416, 1480, 1544, 1544, 1608,
               1608, 1672, 1736, 1736, 1800, 1800, 1864, 1864, 1928, 1992, 1992,
               2024, 2088, 2088, 2152, 2152, 2216, 2280, 2280, 2344, 2344, 2408,
               2472, 2472, 2536, 2536, 2600, 2600, 2664, 2728, 2728, 2792, 2792,
               2856, 2856, 2856, 2984, 2984, 2984, 3112, 3112, 3112, 3240, 3240,
               3240, 3240, 3368, 3368, 3368, 3496, 3496, 3496, 3496, 3624, 3624,
               3624, 3752, 3752, 3752, 3752, 3880, 3880, 3880, 4008, 4008, 4008],
               [32, 72, 144, 176, 208, 256, 296, 328, 376, 424, 472,
               520, 568, 616, 648, 696, 744, 776, 840, 872, 936, 968,
               1000, 1064, 1096, 1160, 1192, 1256, 1288, 1320, 1384, 1416, 1480,
               1544, 1544, 1608, 1672, 1672, 1736, 1800, 1800, 1864, 1928, 1992,
               2024, 2088, 2088, 2152, 2216, 2216, 2280, 2344, 2344, 2408, 2472,
               2536, 2536, 2600, 2664, 2664, 2728, 2792, 2856, 2856, 2856, 2984,
               2984, 3112, 3112, 3112, 3240, 3240, 3240, 3368, 3368, 3368, 3496,
               3496, 3496, 3624, 3624, 3624, 3752, 3752, 3880, 3880, 3880, 4008,
               4008, 4008, 4136, 4136, 4136, 4264, 4264, 4264, 4392, 4392, 4392,
               4584, 4584, 4584, 4584, 4584, 4776, 4776, 4776, 4776, 4968, 4968],
               [40, 104, 176, 208, 256, 328, 392, 440, 504, 568, 616,
               680, 744, 808, 872, 904, 968, 1032, 1096, 1160, 1224, 1256,
               1320, 1384, 1416, 1480, 1544, 1608, 1672, 1736, 1800, 1864, 1928,
               1992, 2024, 2088, 2152, 2216, 2280, 2344, 2408, 2472, 2536, 2536,
               2600, 2664, 2728, 2792, 2856, 2856, 2984, 2984, 3112, 3112, 3240,
               3240, 3368, 3368, 3496, 3496, 3624, 3624, 3624, 3752, 3752, 3880,
               3880, 4008, 4008, 4136, 4136, 4264, 4264, 4392, 4392, 4392, 4584,
               4584, 4584, 4776, 4776, 4776, 4776, 4968, 4968, 4968, 5160, 5160,
               5160, 5352, 5352, 5352, 5352, 5544, 5544, 5544, 5736, 5736, 5736,
               5736, 5992, 5992, 5992, 5992, 6200, 6200, 6200, 6200, 6456, 6456],
               [56, 120, 208, 256, 328, 408, 488, 552, 632, 696, 776,
               840, 904, 1000, 1064, 1128, 1192, 1288, 1352, 1416, 1480, 1544,
               1608, 1736, 1800, 1864, 1928, 1992, 2088, 2152, 2216, 2280, 2344,
               2408, 2472, 2600, 2664, 2728, 2792, 2856, 2984, 2984, 3112, 3112,
               3240, 3240, 3368, 3496, 3496, 3624, 3624, 3752, 3752, 3880, 4008,
               4008, 4136, 4136, 4264, 4264, 4392, 4392, 4584, 4584, 4584, 4776,
               4776, 4968, 4968, 4968, 5160, 5160, 5160, 5352, 5352, 5544, 5544,
               5544, 5736, 5736, 5736, 5992, 5992, 5992, 5992, 6200, 6200, 6200,
               6456, 6456, 6456, 6456, 6712, 6712, 6712, 6968, 6968, 6968, 6968,
               7224, 7224, 7224, 7480, 7480, 7480, 7480, 7736, 7736, 7736, 7992],
               [72, 144, 224, 328, 424, 504, 600, 680, 776, 872, 968,
               1032, 1128, 1224, 1320, 1384, 1480, 1544, 1672, 1736, 1864, 1928,
               2024, 2088, 2216, 2280, 2344, 2472, 2536, 2664, 2728, 2792, 2856,
               2984, 3112, 3112, 3240, 3368, 3496, 3496, 3624, 3752, 3752, 3880,
               4008, 4008, 4136, 4264, 4392, 4392, 4584, 4584, 4776, 4776, 4776,
               4968, 4968, 5160, 5160, 5352, 5352, 5544, 5544, 5736, 5736, 5736,
               5992, 5992, 5992, 6200, 6200, 6200, 6456, 6456, 6712, 6712, 6712,
               6968, 6968, 6968, 7224, 7224, 7224, 7480, 7480, 7480, 7736, 7736,
               7736, 7992, 7992, 7992, 8248, 8248, 8248, 8504, 8504, 8760, 8760,
               8760, 8760, 9144, 9144, 9144, 9144, 9528, 9528, 9528, 9528, 9528],
               [328, 176, 256, 392, 504, 600, 712, 808, 936, 1032, 1128,
               1224, 1352, 1480, 1544, 1672, 1736, 1864, 1992, 2088, 2216, 2280,
               2408, 2472, 2600, 2728, 2792, 2984, 2984, 3112, 3240, 3368, 3496,
               3496, 3624, 3752, 3880, 4008, 4136, 4136, 4264, 4392, 4584, 4584,
               4776, 4776, 4968, 4968, 5160, 5160, 5352, 5352, 5544, 5736, 5736,
               5992, 5992, 5992, 6200, 6200, 6456, 6456, 6456, 6712, 6712, 6968,
               6968, 6968, 7224, 7224, 7480, 7480, 7736, 7736, 7736, 7992, 7992,
               8248, 8248, 8248, 8504, 8504, 8760, 8760, 8760, 9144, 9144, 9144,
               9144, 9528, 9528, 9528, 9528, 9912, 9912, 9912, 10296, 10296, 10296,
               10296, 10680, 10680, 10680, 10680, 11064, 11064, 11064, 11448, 11448, 11448],
               [104, 224, 328, 472, 584, 712, 840, 968, 1096, 1224, 1320,
               1480, 1608, 1672, 1800, 1928, 2088, 2216, 2344, 2472, 2536, 2664,
               2792, 2984, 3112, 3240, 3368, 3368, 3496, 3624, 3752, 3880, 4008,
               4136, 4264, 4392, 4584, 4584, 4776, 4968, 4968, 5160, 5352, 5352,
               5544, 5736, 5736, 5992, 5992, 6200, 6200, 6456, 6456, 6712, 6712,
               6712, 6968, 6968, 7224, 7224, 7480, 7480, 7736, 7736, 7992, 7992,
               8248, 8248, 8504, 8504, 8760, 8760, 8760, 9144, 9144, 9144, 9528,
               9528, 9528, 9912, 9912, 9912, 10296, 10296, 10296, 10680, 10680, 10680,
               11064, 11064, 11064, 11448, 11448, 11448, 11448, 11832, 11832, 11832, 12216,
               12216, 12216, 12576, 12576, 12576, 12960, 12960, 12960, 12960, 13536, 13536],
               [120, 256, 392, 536, 680, 808, 968, 1096, 1256, 1384, 1544,
               1672, 1800, 1928, 2088, 2216, 2344, 2536, 2664, 2792, 2984, 3112,
               3240, 3368, 3496, 3624, 3752, 3880, 4008, 4264, 4392, 4584, 4584,
               4776, 4968, 4968, 5160, 5352, 5544, 5544, 5736, 5992, 5992, 6200,
               6200, 6456, 6456, 6712, 6968, 6968, 7224, 7224, 7480, 7480, 7736,
               7736, 7992, 7992, 8248, 8504, 8504, 8760, 8760, 9144, 9144, 9144,
               9528, 9528, 9528, 9912, 9912, 9912, 10296, 10296, 10680, 10680, 10680,
               11064, 11064, 11064, 11448, 11448, 11448, 11832, 11832, 12216, 12216, 12216,
               12576, 12576, 12576, 12960, 12960, 12960, 13536, 13536, 13536, 13536, 14112,
               14112, 14112, 14112, 14688, 14688, 14688, 14688, 15264, 15264, 15264, 15264],
               [136, 296, 456, 616, 776, 936, 1096, 1256, 1416, 1544, 1736,
               1864, 2024, 2216, 2344, 2536, 2664, 2856, 2984, 3112, 3368, 3496,
               3624, 3752, 4008, 4136, 4264, 4392, 4584, 4776, 4968, 5160, 5160,
               5352, 5544, 5736, 5736, 5992, 6200, 6200, 6456, 6712, 6712, 6968,
               6968, 7224, 7480, 7480, 7736, 7992, 7992, 8248, 8248, 8504, 8760,
               8760, 9144, 9144, 9144, 9528, 9528, 9912, 9912, 10296, 10296, 10296,
               10680, 10680, 11064, 11064, 11064, 11448, 11448, 11832, 11832, 11832, 12216,
               12216, 12576, 12576, 12960, 12960, 12960, 13536, 13536, 13536, 13536, 14112,
               14112, 14112, 14112, 14688, 14688, 14688, 15264, 15264, 15264, 15264, 15840,
               15840, 15840, 16416, 16416, 16416, 16416, 16992, 16992, 16992, 16992, 17568],
               [144, 328, 504, 680, 872, 1032, 1224, 1384, 1544, 1736, 1928,
               2088, 2280, 2472, 2664, 2792, 2984, 3112, 3368, 3496, 3752, 3880,
               4008, 4264, 4392, 4584, 4776, 4968, 5160, 5352, 5544, 5736, 5736,
               5992, 6200, 6200, 6456, 6712, 6712, 6968, 7224, 7480, 7480, 7736,
               7992, 7992, 8248, 8504, 8504, 8760, 9144, 9144, 9144, 9528, 9528,
               9912, 9912, 10296, 10296, 10680, 10680, 11064, 11064, 11448, 11448, 11448,
               11832, 11832, 12216, 12216, 12576, 12576, 12960, 12960, 12960, 13536, 13536,
               13536, 14112, 14112, 14112, 14688, 14688, 14688, 14688, 15264, 15264, 15264,
               15840, 15840, 15840, 16416, 16416, 16416, 16992, 16992, 16992, 16992, 17568,
               17568, 17568, 18336, 18336, 18336, 18336, 18336, 19080, 19080, 19080, 19080],
               [176, 376, 584, 776, 1000, 1192, 1384, 1608, 1800, 2024, 2216,
               2408, 2600, 2792, 2984, 3240, 3496, 3624, 3880, 4008, 4264, 4392,
               4584, 4776, 4968, 5352, 5544, 5736, 5992, 5992, 6200, 6456, 6712,
               6968, 6968, 7224, 7480, 7736, 7736, 7992, 8248, 8504, 8760, 8760,
               9144, 9144, 9528, 9528, 9912, 9912, 10296, 10680, 10680, 11064, 11064,
               11448, 11448, 11832, 11832, 12216, 12216, 12576, 12576, 12960, 12960, 13536,
               13536, 13536, 14112, 14112, 14112, 14688, 14688, 14688, 15264, 15264, 15840,
               15840, 15840, 16416, 16416, 16416, 16992, 16992, 16992, 17568, 17568, 17568,
               18336, 18336, 18336, 18336, 19080, 19080, 19080, 19080, 19848, 19848, 19848,
               19848, 20616, 20616, 20616, 21384, 21384, 21384, 21384, 22152, 22152, 22152],
               [208, 440, 680, 904, 1128, 1352, 1608, 1800, 2024, 2280, 2472,
               2728, 2984, 3240, 3368, 3624, 3880, 4136, 4392, 4584, 4776, 4968,
               5352, 5544, 5736, 5992, 6200, 6456, 6712, 6712, 6968, 7224, 7480,
               7736, 7992, 8248, 8504, 8760, 8760, 9144, 9528, 9528, 9912, 9912,
               10296, 10680, 10680, 11064, 11064, 11448, 11832, 11832, 12216, 12216, 12576,
               12576, 12960, 12960, 13536, 13536, 14112, 14112, 14112, 14688, 14688, 15264,
               15264, 15264, 15840, 15840, 16416, 16416, 16416, 16992, 16992, 17568, 17568,
               17568, 18336, 18336, 18336, 19080, 19080, 19080, 19080, 19848, 19848, 19848,
               20616, 20616, 20616, 21384, 21384, 21384, 21384, 22152, 22152, 22152, 22920,
               22920, 22920, 23688, 23688, 23688, 23688, 24496, 24496, 24496, 24496, 25456],
               [224, 488, 744, 1000, 1256, 1544, 1800, 2024, 2280, 2536, 2856,
               3112, 3368, 3624, 3880, 4136, 4392, 4584, 4968, 5160, 5352, 5736,
               5992, 6200, 6456, 6712, 6968, 7224, 7480, 7736, 7992, 8248, 8504,
               8760, 9144, 9144, 9528, 9912, 9912, 10296, 10680, 10680, 11064, 11448,
               11448, 11832, 12216, 12216, 12576, 12960, 12960, 13536, 13536, 14112, 14112,
               14688, 14688, 14688, 15264, 15264, 15840, 15840, 16416, 16416, 16992, 16992,
               16992, 17568, 17568, 18336, 18336, 18336, 19080, 19080, 19080, 19848, 19848,
               19848, 20616, 20616, 20616, 21384, 21384, 21384, 22152, 22152, 22152, 22920,
               22920, 22920, 23688, 23688, 23688, 24496, 24496, 24496, 25456, 25456, 25456,
               25456, 26416, 26416, 26416, 26416, 27376, 27376, 27376, 27376, 28336, 28336],
              [256, 552, 840, 1128, 1416, 1736, 1992, 2280, 2600, 2856, 3112,
               3496, 3752, 4008, 4264, 4584, 4968, 5160, 5544, 5736, 5992, 6200,
               6456, 6968, 7224, 7480, 7736, 7992, 8248, 8504, 8760, 9144, 9528,
               9912, 9912, 10296, 10680, 11064, 11064, 11448, 11832, 12216, 12216, 12576,
               12960, 12960, 13536, 13536, 14112, 14112, 14688, 14688, 15264, 15264, 15840,
               15840, 16416, 16416, 16992, 16992, 17568, 17568, 18336, 18336, 18336, 19080,
               19080, 19848, 19848, 19848, 20616, 20616, 20616, 21384, 21384, 22152, 22152,
               22152, 22920, 22920, 22920, 23688, 23688, 24496, 24496, 24496, 25456, 25456,
               25456, 25456, 26416, 26416, 26416, 27376, 27376, 27376, 28336, 28336, 28336,
               28336, 29296, 29296, 29296, 29296, 30576, 30576, 30576, 30576, 31704, 31704],
              [280, 600, 904, 1224, 1544, 1800, 2152, 2472, 2728, 3112, 3368,
               3624, 4008, 4264, 4584, 4968, 5160, 5544, 5736, 6200, 6456, 6712,
               6968, 7224, 7736, 7992, 8248, 8504, 8760, 9144, 9528, 9912, 10296,
               10296, 10680, 11064, 11448, 11832, 11832, 12216, 12576, 12960, 12960, 13536,
               13536, 14112, 14688, 14688, 15264, 15264, 15840, 15840, 16416, 16416, 16992,
               16992, 17568, 17568, 18336, 18336, 18336, 19080, 19080, 19848, 19848, 20616,
               20616, 20616, 21384, 21384, 22152, 22152, 22152, 22920, 22920, 23688, 23688,
               23688, 24496, 24496, 24496, 25456, 25456, 25456, 26416, 26416, 26416, 27376,
               27376, 27376, 28336, 28336, 28336, 29296, 29296, 29296, 29296, 30576, 30576,
               30576, 30576, 31704, 31704, 31704, 31704, 32856, 32856, 32856, 34008, 34008],
               [328, 632, 968, 1288, 1608, 1928, 2280, 2600, 2984, 3240, 3624,
               3880, 4264, 4584, 4968, 5160, 5544, 5992, 6200, 6456, 6712, 7224,
               7480, 7736, 7992, 8504, 8760, 9144, 9528, 9912, 9912, 10296, 10680,
               11064, 11448, 11832, 12216, 12216, 12576, 12960, 13536, 13536, 14112, 14112,
               14688, 14688, 15264, 15840, 15840, 16416, 16416, 16992, 16992, 17568, 17568,
               18336, 18336, 19080, 19080, 19848, 19848, 19848, 20616, 20616, 21384, 21384,
               22152, 22152, 22152, 22920, 22920, 23688, 23688, 24496, 24496, 24496, 25456,
               25456, 25456, 26416, 26416, 26416, 27376, 27376, 27376, 28336, 28336, 28336,
               29296, 29296, 29296, 30576, 30576, 30576, 30576, 31704, 31704, 31704, 31704,
               32856, 32856, 32856, 34008, 34008, 34008, 34008, 35160, 35160, 35160, 35160],
               [336, 696, 1064, 1416, 1800, 2152, 2536, 2856, 3240, 3624, 4008,
               4392, 4776, 5160, 5352, 5736, 6200, 6456, 6712, 7224, 7480, 7992,
               8248, 8760, 9144, 9528, 9912, 10296, 10296, 10680, 11064, 11448, 11832,
               12216, 12576, 12960, 13536, 13536, 14112, 14688, 14688, 15264, 15264, 15840,
               16416, 16416, 16992, 17568, 17568, 18336, 18336, 19080, 19080, 19848, 19848,
               20616, 20616, 20616, 21384, 21384, 22152, 22152, 22920, 22920, 23688, 23688,
               24496, 24496, 24496, 25456, 25456, 26416, 26416, 26416, 27376, 27376, 27376,
               28336, 28336, 29296, 29296, 29296, 30576, 30576, 30576, 30576, 31704, 31704,
               31704, 32856, 32856, 32856, 34008, 34008, 34008, 35160, 35160, 35160, 35160,
               36696, 36696, 36696, 36696, 37888, 37888, 37888, 39232, 39232, 39232, 39232],
               [376, 776, 1160, 1544, 1992, 2344, 2792, 3112, 3624, 4008, 4392,
               4776, 5160, 5544, 5992, 6200, 6712, 7224, 7480, 7992, 8248, 8760,
               9144, 9528, 9912, 10296, 10680, 11064, 11448, 11832, 12216, 12576, 12960,
               13536, 14112, 14112, 14688, 15264, 15264, 15840, 16416, 16416, 16992, 17568,
               17568, 18336, 18336, 19080, 19080, 19848, 19848, 20616, 21384, 21384, 22152,
               22152, 22920, 22920, 23688, 23688, 24496, 24496, 24496, 25456, 25456, 26416,
               26416, 27376, 27376, 27376, 28336, 28336, 29296, 29296, 29296, 30576, 30576,
               30576, 31704, 31704, 31704, 32856, 32856, 32856, 34008, 34008, 34008, 35160,
               35160, 35160, 36696, 36696, 36696, 37888, 37888, 37888, 37888, 39232, 39232,
               39232, 40576, 40576, 40576, 40576, 42368, 42368, 42368, 42368, 43816, 43816],
               [408, 840, 1288, 1736, 2152, 2600, 2984, 3496, 3880, 4264, 4776,
               5160, 5544, 5992, 6456, 6968, 7224, 7736, 8248, 8504, 9144, 9528,
               9912, 10296, 10680, 11064, 11448, 12216, 12576, 12960, 13536, 13536, 14112,
               14688, 15264, 15264, 15840, 16416, 16992, 16992, 17568, 18336, 18336, 19080,
               19080, 19848, 20616, 20616, 21384, 21384, 22152, 22152, 22920, 22920, 23688,
               24496, 24496, 25456, 25456, 25456, 26416, 26416, 27376, 27376, 28336, 28336,
               29296, 29296, 29296, 30576, 30576, 30576, 31704, 31704, 32856, 32856, 32856,
               34008, 34008, 34008, 35160, 35160, 35160, 36696, 36696, 36696, 37888, 37888,
               37888, 39232, 39232, 39232, 40576, 40576, 40576, 40576, 42368, 42368, 42368,
               43816, 43816, 43816, 43816, 45352, 45352, 45352, 46888, 46888, 46888, 46888],
               [440, 904, 1384, 1864, 2344, 2792, 3240, 3752, 4136, 4584, 5160,
               5544, 5992, 6456, 6968, 7480, 7992, 8248, 8760, 9144, 9912, 10296,
               10680, 11064, 11448, 12216, 12576, 12960, 13536, 14112, 14688, 14688, 15264,
               15840, 16416, 16992, 16992, 17568, 18336, 18336, 19080, 19848, 19848, 20616,
               20616, 21384, 22152, 22152, 22920, 22920, 23688, 24496, 24496, 25456, 25456,
               26416, 26416, 27376, 27376, 28336, 28336, 29296, 29296, 29296, 30576, 30576,
               31704, 31704, 31704, 32856, 32856, 34008, 34008, 34008, 35160, 35160, 35160,
               36696, 36696, 36696, 37888, 37888, 39232, 39232, 39232, 40576, 40576, 40576,
               42368, 42368, 42368, 42368, 43816, 43816, 43816, 45352, 45352, 45352, 46888,
               46888, 46888, 46888, 48936, 48936, 48936, 48936, 48936, 51024, 51024, 51024],
               [488, 1000, 1480, 1992, 2472, 2984, 3496, 4008, 4584, 4968, 5544,
               5992, 6456, 6968, 7480, 7992, 8504, 9144, 9528, 9912, 10680, 11064,
               11448, 12216, 12576, 12960, 13536, 14112, 14688, 15264, 15840, 15840, 16416,
               16992, 17568, 18336, 18336, 19080, 19848, 19848, 20616, 21384, 21384, 22152,
               22920, 22920, 23688, 24496, 24496, 25456, 25456, 26416, 26416, 27376, 27376,
               28336, 28336, 29296, 29296, 30576, 30576, 31704, 31704, 31704, 32856, 32856,
               34008, 34008, 35160, 35160, 35160, 36696, 36696, 36696, 37888, 37888, 39232,
               39232, 39232, 40576, 40576, 40576, 42368, 42368, 42368, 43816, 43816, 43816,
               45352, 45352, 45352, 46888, 46888, 46888, 46888, 48936, 48936, 48936, 48936,
               51024, 51024, 51024, 51024, 52752, 52752, 52752, 52752, 55056, 55056, 55056],
               [520, 1064, 1608, 2152, 2664, 3240, 3752, 4264, 4776, 5352, 5992,
               6456, 6968, 7480, 7992, 8504, 9144, 9528, 10296, 10680, 11448, 11832,
               12576, 12960, 13536, 14112, 14688, 15264, 15840, 16416, 16992, 16992, 17568,
               18336, 19080, 19080, 19848, 20616, 21384, 21384, 22152, 22920, 22920, 23688,
               24496, 24496, 25456, 25456, 26416, 27376, 27376, 28336, 28336, 29296, 29296,
               30576, 30576, 31704, 31704, 32856, 32856, 34008, 34008, 34008, 35160, 35160,
               36696, 36696, 36696, 37888, 37888, 39232, 39232, 40576, 40576, 40576, 42368,
               42368, 42368, 43816, 43816, 43816, 45352, 45352, 45352, 46888, 46888, 46888,
               48936, 48936, 48936, 48936, 51024, 51024, 51024, 51024, 52752, 52752, 52752,
               55056, 55056, 55056, 55056, 57336, 57336, 57336, 57336, 59256, 59256, 59256],
               [552, 1128, 1736, 2280, 2856, 3496, 4008, 4584, 5160, 5736, 6200,
               6968, 7480, 7992, 8504, 9144, 9912, 10296, 11064, 11448, 12216, 12576,
               12960, 13536, 14112, 14688, 15264, 15840, 16416, 16992, 17568, 18336, 19080,
               19848, 19848, 20616, 21384, 22152, 22152, 22920, 23688, 24496, 24496, 25456,
               25456, 26416, 27376, 27376, 28336, 28336, 29296, 29296, 30576, 30576, 31704,
               31704, 32856, 32856, 34008, 34008, 35160, 35160, 36696, 36696, 37888, 37888,
               37888, 39232, 39232, 40576, 40576, 40576, 42368, 42368, 43816, 43816, 43816,
               45352, 45352, 45352, 46888, 46888, 46888, 48936, 48936, 48936, 51024, 51024,
               51024, 51024, 52752, 52752, 52752, 55056, 55056, 55056, 55056, 57336, 57336,
               57336, 57336, 59256, 59256, 59256, 59256, 61664, 61664, 61664, 61664, 63776],
               [584, 1192, 1800, 2408, 2984, 3624, 4264, 4968, 5544, 5992, 6712,
               7224, 7992, 8504, 9144, 9912, 10296, 11064, 11448, 12216, 12960, 13536,
               14112, 14688, 15264, 15840, 16416, 16992, 17568, 18336, 19080, 19848, 19848,
               20616, 21384, 22152, 22920, 22920, 23688, 24496, 25456, 25456, 26416, 26416,
               27376, 28336, 28336, 29296, 29296, 30576, 31704, 31704, 32856, 32856, 34008,
               34008, 35160, 35160, 36696, 36696, 36696, 37888, 37888, 39232, 39232, 40576,
               40576, 42368, 42368, 42368, 43816, 43816, 45352, 45352, 45352, 46888, 46888,
               46888, 48936, 48936, 48936, 51024, 51024, 51024, 52752, 52752, 52752, 52752,
               55056, 55056, 55056, 57336, 57336, 57336, 57336, 59256, 59256, 59256, 61664,
               61664, 61664, 61664, 63776, 63776, 63776, 63776, 66592, 66592, 66592, 66592],
               [616, 1256, 1864, 2536, 3112, 3752, 4392, 5160, 5736, 6200, 6968,
               7480, 8248, 8760, 9528, 10296, 10680, 11448, 12216, 12576, 13536, 14112,
               14688, 15264, 15840, 16416, 16992, 17568, 18336, 19080, 19848, 20616, 20616,
               21384, 22152, 22920, 23688, 24496, 24496, 25456, 26416, 26416, 27376, 28336,
               28336, 29296, 29296, 30576, 31704, 31704, 32856, 32856, 34008, 34008, 35160,
               35160, 36696, 36696, 37888, 37888, 39232, 39232, 40576, 40576, 40576, 42368,
               42368, 43816, 43816, 43816, 45352, 45352, 46888, 46888, 46888, 48936, 48936,
               48936, 51024, 51024, 51024, 52752, 52752, 52752, 55056, 55056, 55056, 55056,
               57336, 57336, 57336, 59256, 59256, 59256, 61664, 61664, 61664, 61664, 63776,
               63776, 63776, 63776, 66592, 66592, 66592, 66592, 68808, 68808, 68808, 71112],
               [712, 1480, 2216, 2984, 3752, 4392, 5160, 5992, 6712, 7480, 8248,
               8760, 9528, 10296, 11064, 11832, 12576, 13536, 14112, 14688, 15264, 16416,
               16992, 17568, 18336, 19080, 19848, 20616, 21384, 22152, 22920, 23688, 24496,
               25456, 25456, 26416, 27376, 28336, 29296, 29296, 30576, 30576, 31704, 32856,
               32856, 34008, 35160, 35160, 36696, 36696, 37888, 37888, 39232, 40576, 40576,
               40576, 42368, 42368, 43816, 43816, 45352, 45352, 46888, 46888, 48936, 48936,
               48936, 51024, 51024, 52752, 52752, 52752, 55056, 55056, 55056, 55056, 57336,
               57336, 57336, 59256, 59256, 59256, 61664, 61664, 61664, 63776, 63776, 63776,
               66592, 66592, 66592, 68808, 68808, 68808, 71112, 71112, 71112, 73712, 73712,
               75376, 75376, 75376, 75376, 75376, 75376, 75376, 75376, 75376, 75376, 75376],

               [648, 1320, 1992, 2664, 3368, 4008, 4584, 5352, 5992, 6712,
                7224, 7992,  8504, 9144, 9912, 10680, 11448, 11832, 12576, 12960,
                14112, 14688, 15264, 15840, 16416, 16992, 17568, 18336, 19080, 19848,
                20616, 21384, 22152, 22920, 22920, 23688, 24496, 25456, 25456, 26416,
                27376, 27376, 28336, 29296, 29296, 30576, 31704, 31704, 32856, 32856,
                34008, 34008, 35160, 35160, 36696, 36696, 37888, 37888, 39232, 39232,
                40576, 40576, 42368, 42368, 43816, 43816, 43816, 45352, 45352, 46888,
                46888, 46888, 48936, 48936, 48936, 51024, 51024, 51024, 52752, 52752,
                52752, 55056, 55056, 55056, 57336, 57336, 57336, 59256, 59256, 59256,
                59256, 61664, 61664, 61664, 63776, 63776, 63776, 63776, 66592, 66592,
                66592, 66592, 68808, 68808, 68808, 71112, 71112, 71112, 71112, 73712],
               [680,  1384, 2088, 2792, 3496, 4264, 4968, 5544, 6200, 6968,
                7736, 8504, 9144, 9912, 10680, 11064, 11832, 12576, 13536, 14112,
                14688, 15264, 16416, 16992, 17568, 18336, 19080, 19848, 20616, 21384,
                22152, 22152, 22920, 23688, 24496, 25456, 26416, 26416, 27376, 28336,
                29296, 29296, 30576, 30576, 31704, 32856, 32856, 34008, 34008, 35160,
                35160, 36696, 36696, 37888, 39232, 39232, 40576, 40576, 42368, 42368,
                42368, 43816, 43816, 45352, 45352, 46888, 46888, 46888, 48936, 48936,
                48936, 51024, 51024, 52752, 52752, 52752, 55056, 55056, 55056, 57336,
                57336, 57336, 59256, 59256, 59256, 61664, 61664, 61664, 61664, 63776,
                63776, 63776, 66592, 66592, 66592, 66592, 68808, 68808, 68808, 71112,
                71112, 71112, 73712, 73712, 73712, 75376, 75376, 76208, 76208, 76208],
               [712,    1480,      2216,      2984,      3752,      4392,      5160,      5992,      6712,      7480,
                8248,    8760,      9528,     10296,     11064,     11832,     12576,     13536,     14112,     14688,
                15840,  16416,     16992,     17568,     18336,     19080,     19848,     20616,     21384,     22152,
                22920,  23688,     24496,     25456,     26416,     26416,     27376,     28336,     29296,     29296,
                30576,  31704,     31704,     32856,     34008,     34008,     35160,     35160,     36696,     36696,
                37888,  39232,     39232,     40576,     40576,     42368,     42368,     43816,     43816,     45352,
                45352,  45352,     46888,     46888,     48936,     48936,     48936,     51024,     51024,     52752,
                52752,  52752,     55056,     55056,     55056,     57336,     57336,     57336,     59256,     59256,
                59256,  61664,     61664,     61664,     63776,     63776,     63776,     66592,     66592,     66592,
                66592,  68808,     68808,     68808,     71112,     71112,     71112,     73712,     73712,     73712,
                75376,  76208,     76208,     76208,     78704,     78704,     78704,     81176,     81176,     81176],
               [776,    1544,      2344,      3112,      3880,      4776,      5544,      6200,      6968,      7736,
                8504,    9528,     10296,     11064,     11832,     12576,     13536,     14112,     14688,     15840,
                16416,  16992,     18336,     19080,     19848,     20616,     21384,     22152,     22920,     23688,
                24496,  25456,     25456,     26416,     27376,     28336,     29296,     29296,     30576,     31704,
                31704,  32856,     34008,     34008,     35160,     36696,     36696,     37888,     37888,     39232,
                40576,  40576,     42368,     42368,     43816,     43816,     45352,     45352,     46888,     46888,
                46888,  48936,     48936,     51024,     51024,     51024,     52752,     52752,     55056,     55056,
                55056,  57336,     57336,     57336,     59256,     59256,     59256,     61664,     61664,     63776,
                63776,  63776,     63776,     66592,     66592,     66592,     68808,     68808,     68808,     71112,
                71112,  71112,     73712,     73712,     75376,     75376,     76208,     76208,     78704,     78704,
                78704,  81176,     81176,     81176,     81176,     84760,     84760,     84760,     84760,     87936],
               [808,    1608,      2472,      3240,      4136,      4968,      5736,      6456,      7480,      8248,
                9144,    9912,     10680,     11448,     12216,     12960,     14112,     14688,     15840,     16416,
                17568,  18336,     19080,     19848,     20616,     21384,     22152,     22920,     23688,     24496,
                25456, 26416,     27376,     28336,     29296,     29296,     30576,     31704,     31704,     32856,
                34008,  35160,     35160,     36696,     36696,     37888,     39232,     39232,     40576,     40576,
                42368,  42368,     43816,     45352,     45352,     46888,     46888,     46888,     48936,     48936,
                51024,  51024,     52752,     52752,     52752,     55056,     55056,     55056,     57336,     57336,
                59256,  59256,     59256,     61664,     61664,     63776,     63776,     63776,     66592,     66592,
                66592,  68808,     68808,     68808,     71112,     71112,     71112,     73712,     73712,     73712,
                75376,  76208,     76208,     78704,     78704,     78704,     81176,     81176,     81176,     81176,
                84760,  84760,     84760,     84760,     87936,     87936,     87936,     87936,     90816,     90816],
               [840,    1672,      2536,      3368,      4264,      5160,      5992,      6712,      7736,      8504,
                9528,   10296,     11064,     11832,     12960,     13536,     14688,     15264,     16416,     16992,
                17568,  19080,     19848,     20616,     21384,     22152,     22920,     23688,     24496,     25456,
                26416,  27376,     28336,     29296,     29296,     30576,     31704,     32856,     32856,     34008,
                35160,  35160,     36696,     37888,     37888,     39232,     40576,     40576,     42368,     42368,
                43816,  43816,     45352,     46888,     46888,     46888,     48936,     48936,     51024,     51024,
                52752,  52752,     52752,     55056,     55056,     57336,     57336,     57336,     59256,     59256,
                61664,  61664,     61664,     63776,     63776,     63776,     66592,     66592,     66592,     68808,
                68808,  71112,     71112,     71112,     73712,     73712,     73712,     75376,     76208,     76208,
                78704,  78704,     78704,     81176,     81176,     81176,     84760,     84760,     84760,     84760,
                87936,  87936,     87936,     87936,     90816,     90816,     90816,     93800,     93800,     93800],
               [968,    1992,      2984,      4008,      4968,      5992,      6968,      7992,      8760,      9912,
                10680,  11832,     12960,     13536,     14688,     15840,     16992,     17568,     19080,     19848,
                20616,  21384,     22920,     23688,     24496,     25456,     26416,     27376,     28336,     29296,
                30576,  31704,     32856,     34008,     35160,     35160,     36696,     37888,     39232,     39232,
                40576,  40576,     42368,     43816,     43816,     45352,     46888,     46888,     48936,     48936,
                51024,  51024,     52752,     52752,     55056,     55056,     57336,     57336,     59256,     59256,
                59256,  61664,     61664,     63776,     63776,     63776,     66592,     66592,     68808,     68808,
                71112,  71112,     71112,     73712,     75376,     76208,     76208,     76208,     78704,     78704,
                81176,  81176,     81176,     81176,     84760,     84760,     84760,     87936,     87936,     87936,
                90816,  90816,     90816,     93800,     93800,     93800,     93800,     97896,     97896,     97896,
                97896,  97896,     97896,     97896,     97896,     97896,     97896,     97896,     97896,     97896]]

# I_tbs = 26A, 3GPP 36.213 Rel 13
tbs_table_26A = [632, 1288, 1928, 2600, 3240, 3880, 4584, 5160, 5992, 6456,
                 7224, 7736, 8504, 9144, 9912, 10296, 11064, 11832, 12576, 12960,
                 13536, 14112, 15264, 15840, 16416, 16992, 17568, 18336, 19080, 19848,
                 20616, 20616, 21384, 22152, 22920, 23688, 24496, 24496, 25456, 26416,
                 26416, 27376, 27376, 29296, 29296, 29296, 30576, 30576, 31704, 32856,
                 32856, 34008, 34008, 35160, 36696, 36696, 36696, 37888, 37888, 39232,
                 40576, 40576, 40576, 40576, 42368, 42368, 43816, 43816, 45352, 45352,
                 45352, 46888, 46888, 48936, 48936, 48936, 51024, 51024, 51024, 52752,
                 52752, 52752, 55056, 55056, 55056, 55056, 57336, 57336, 57336, 59256,
                 59256, 59256, 59256, 61664, 61664, 61664, 63776, 63776, 63776, 66592,
                 66592, 66592, 66592, 68808, 68808, 68808, 71112, 71112, 71112, 71112]

# I_tbs = 33A, 3GPP 36.213 Rel 13
tbs_table_33A = [840,    1736,      2600,      3496,      4392,      5160,      5992,      6968,      7736,      8760,
                 9528,   10296,     11448,     12216,     12960,     14112,     14688,     15840,     16416,     17568,
                 18336,  19080,     19848,     20616,     22152,     22920,     23688,     24496,     25456,     26416,
                 27376,  27376,     29296,     29296,     30576,     30576,     31704,     32856,     34008,     35160,
                 35160,  36696,     36696,     37888,     39232,     40576,     40576,     40576,     42368,     43816,
                 43816,  45352,     45352,     46888,     48936,     48936,     48936,     51024,     51024,     52752,
                 52752,  55056,     55056,     55056,     57336,     57336,     57336,     59256,     59256,     61664,
                 61664,  61664,     63776,     63776,     66592,     66592,     66592,     68808,     68808,     68808,
                 71112,  71112,     71112,     73712,     75376,     75376,     76208,     76208,     78704,     78704,
                 78704,  81176,     81176,     81176,     81176,     84760,     84760,     84760,     84760,     87936,
                 87936,  87936,     87936,     90816,     90816,     90816,     93800,     93800,     93800,     97896]


# ###################################################################################
#
#  DCI decoder functions
#
# ###################################################################################
# Resource allocation group size for resource allocation Type 0
# Table 7.1.6.1-1,  3GPP TS 36.213

# PRB allocation
# 0: no allocation (00)
# 1: 1 slot (01)
# 2: 1 slot (10)
# 3: 2 slots (11)


# Helper function to get the resource block group size based on the number of PRBs
def resource_block_group_size(N_rb_dl):
    if N_rb_dl <= 10:
        return 1
    elif 11 <= N_rb_dl <= 26:
        return 2
    elif 27 <= N_rb_dl <= 63:
        return 3
    elif 64 <= N_rb_dl <= 110:
        return 4
    else:
        raise ValueError("Error in number of cell resource blocks")

# Function to calculate the Ngap for Type 2 Random Access
def ra_type2_Ngap(gap, NB_CELL_PRB):
    if NB_CELL_PRB <= 10:
        return math.ceil(NB_CELL_PRB / 2)
    elif NB_CELL_PRB == 11:
        return 4
    elif 12 <= NB_CELL_PRB <= 19:
        return 8
    elif 20 <= NB_CELL_PRB <= 26:
        return 12
    elif 27 <= NB_CELL_PRB <= 44:
        return 18
    elif 45 <= NB_CELL_PRB <= 49:
        return 27
    elif 50 <= NB_CELL_PRB <= 63:
        return 27 if gap == 1 else 9
    elif 64 <= NB_CELL_PRB <= 79:
        return 32 if gap == 1 else 16
    else:
        return 48 if gap == 1 else 16

# Function to calculate the number of VRBs for Type 2 RA
def n_vrb_distributed_type2(Ngap, is_Ngap_1, NB_CELL_PRB):
    if is_Ngap_1:
        return 2 * min(Ngap, NB_CELL_PRB - Ngap)
    else:
        return (math.floor(NB_CELL_PRB / (2 * Ngap))) * 2 * Ngap

# Function to extract RB start and L_crb from RIV for Type 2 RA
def vrb_parameters_from_riv(riv, N_vrb, cell_prb):
    L_crb = math.floor(riv / cell_prb) + 1
    RB_start = int(riv % cell_prb)
    if L_crb > N_vrb - RB_start:
        L_crb = cell_prb - math.floor(riv / cell_prb) + 1
        RB_start = int(cell_prb - (riv % cell_prb) - 1)
    return RB_start, L_crb

# Function to determine PRB index for Type 0 RA
def prb_index_ra_type0(bitmap, NB_CELL_PRB):
    prb_index = [0] * NB_CELL_PRB
    P = resource_block_group_size(NB_CELL_PRB)
    total_nb_rbgs = math.ceil(NB_CELL_PRB / P)
    for i in range(total_nb_rbgs):
        if int(bitmap[i]) == 1:
            for j in range(P):
                if P * i + j < NB_CELL_PRB:
                    prb_index[P * i + j] = 3
    return prb_index

# Function to determine PRB index for Type 1 RA
def prb_index_ra_type1(subset, shift_is_used, n_rb_type1, bitmap,NB_CELL_PRB):
    prb_index = [0] * NB_CELL_PRB
    P = resource_block_group_size(NB_CELL_PRB)
    condition = (math.floor((NB_CELL_PRB - 1) / P)) % P

    if subset < condition:
        n_rb_rbg_subset = (math.floor((NB_CELL_PRB - 1) / (P * P))) * P + P

    elif subset == condition:
        n_rb_rbg_subset = (math.floor((NB_CELL_PRB - 1) / (P * P))) * P + (NB_CELL_PRB - 1) % P + 1

    else:
        n_rb_rbg_subset = (math.floor((NB_CELL_PRB - 1) / (P * P))) * P

    if shift_is_used:
        shift = n_rb_rbg_subset - n_rb_type1
    else:
        shift = 0

    for i in range(n_rb_type1):
        if int(bitmap[i]) == 1:
            idx = math.floor((i + shift) / P) * P * P + subset * P + (i + shift) % P
            if idx < NB_CELL_PRB:
                prb_index[idx] = 3
            else:
                raise ValueError("Error, invalid index in Type1 RA")
    return prb_index


def prb_index_ra_type2(dci_format, is_common_rnti, is_localized_vrb, bitmap, NB_CELL_PRB):
    prb_index = [0] * NB_CELL_PRB

    if is_localized_vrb:
        # Localized VRB
        N_vrb = NB_CELL_PRB
        riv = int(bitmap, 2)
    else:
        # Distributed VRB
        if (NB_CELL_PRB < 50) or ((dci_format == SRSLTE_DCI_FORMAT1A) and is_common_rnti):
            # always Ngap,1
            is_Ngap_1 = True
            riv = int(bitmap, 2)
            Ngap = ra_type2_Ngap(1, NB_CELL_PRB)
            N_vrb = n_vrb_distributed_type2(Ngap, is_Ngap_1, NB_CELL_PRB)
        else:
            n_gap_flag = int(bitmap[0])  # one bit
            riv = int(bitmap[1:], 2)
            if n_gap_flag == 0:
                # Ngap,1
                is_Ngap_1 = True
                Ngap = ra_type2_Ngap(1, NB_CELL_PRB)
                N_vrb = n_vrb_distributed_type2(Ngap, is_Ngap_1, NB_CELL_PRB)
            else:
                # Ngap,2
                is_Ngap_1 = False
                Ngap = ra_type2_Ngap(2, NB_CELL_PRB)
                N_vrb = n_vrb_distributed_type2(Ngap, is_Ngap_1, NB_CELL_PRB)

    # riv value to L_crb and RB_start values
    if dci_format == SRSLTE_DCI_FORMAT1C:
        if NB_CELL_PRB < 50:
            n_step = 2
        else:
            n_step = 4
        N_vrb = math.floor(N_vrb / n_step)
        cell_prb2 = N_vrb
    else:
        cell_prb2 = NB_CELL_PRB
    RB_start, L_crb = vrb_parameters_from_riv(riv, N_vrb, cell_prb2)

    if dci_format == SRSLTE_DCI_FORMAT1C:
        RB_start *= n_step
        L_crb *= n_step

    # Mapping VRB to PRB from 6.2.3.2 of 3gpp 36.211
    if is_localized_vrb:
        # Localized VRB
        prb_index[int(RB_start): int(RB_start) + int(L_crb)] = [3]*int(L_crb)

    else:
        # distributed VRB
        prb_index_distVRB = np.zeros((2, NB_CELL_PRB))
        N_vrb = n_vrb_distributed_type2(Ngap, is_Ngap_1, NB_CELL_PRB)

        if is_Ngap_1:
            # Ngap,1
            N_tilde_vrb = N_vrb
        else:
            # Ngap,2
            N_tilde_vrb = 2 * Ngap  # as 3gpp 36.211

        P = resource_block_group_size(NB_CELL_PRB)
        N_row = math.ceil(N_tilde_vrb / (4 * P)) * P
        N_null = 4 * N_row - N_tilde_vrb

        for i in range(int(L_crb)):
            n_vrb = i + RB_start
            n_tilde_vrb = int(n_vrb % N_tilde_vrb)
            n_tilde_prb = 2 * N_row * (n_tilde_vrb % 2) + math.floor(n_tilde_vrb / 2) + N_tilde_vrb * math.floor(
                n_vrb / N_tilde_vrb)
            n_tilde2_prb = N_row * (n_tilde_vrb % 4) + math.floor(n_tilde_vrb / 4) + N_tilde_vrb * math.floor(
                n_vrb / N_tilde_vrb)

            # for even slot (first slot 3gpp 36.211)
            if (N_null != 0) and (n_tilde_vrb >= (N_tilde_vrb - N_null)) and ((n_tilde_vrb % 2) == 1):
                n_tilde_prb_even = n_tilde_prb - N_row

            elif N_null != 0 and n_tilde_vrb >= (N_tilde_vrb - N_null) and (n_tilde_vrb % 2) == 0:
                n_tilde_prb_even = n_tilde_prb - N_row + N_null / 2

            elif N_null != 0 and n_tilde_vrb < (N_tilde_vrb - N_null) and (n_tilde_vrb % 4) >= 2:
                n_tilde_prb_even = n_tilde2_prb - N_null / 2
            else:
                n_tilde_prb_even = n_tilde2_prb

            # for odd slot (second slot according to 3gpp 36.211)
            n_tilde_prb_odd = int(
                (n_tilde_prb_even + N_tilde_vrb / 2) % N_tilde_vrb + N_tilde_vrb * math.floor(n_vrb / N_tilde_vrb))

            if n_tilde_prb_even < N_tilde_vrb / 2:
                if n_tilde_prb_even < NB_CELL_PRB:
                    prb_index_distVRB[0, int(n_tilde_prb_even)] = 1
            else:
                if (n_tilde_prb_even + Ngap - N_tilde_vrb / 2) < NB_CELL_PRB:
                    prb_index_distVRB[0, int(n_tilde_prb_even + Ngap - N_tilde_vrb / 2)] = 1

            if n_tilde_prb_odd < N_tilde_vrb / 2:
                if n_tilde_prb_odd < NB_CELL_PRB:
                    prb_index_distVRB[1, int(n_tilde_prb_odd)] = 1
            else:
                if (n_tilde_prb_odd + Ngap - N_tilde_vrb / 2) < NB_CELL_PRB:
                    prb_index_distVRB[1, int(n_tilde_prb_odd + Ngap - N_tilde_vrb / 2)] = 1

        # prb_index_distVRB to prb_index
        prb_index = (2 * prb_index_distVRB[0, :] + prb_index_distVRB[1, :]).astype('int').tolist()
    return prb_index



# ############################################################################
#
#                   TB decoder
#
# ###########################################################################



def mcs_idx_to_tbs_idx_and_modulation_dl(mcs_index, nb_prb, alt_cqi_table_r12, only_2nd_slot, dci_format):

    if alt_cqi_table_r12 & (dci_format not in [SRSLTE_DCI_FORMAT1A, SRSLTE_DCI_FORMAT1C]):
        # Rel 13, if the higher layer parameter altCQI-Table-r12 is configured
        # 36.213 - Rel 13, Table 7.1.7.1-1A
        if mcs_index < 5:
            tb_mod = MOD_QPSK
            tbs_index = int(2*mcs_index)
        elif mcs_index < 11:
            tb_mod = MOD_16QAM
            tbs_index = int(mcs_index + 5)
        elif mcs_index < 20:
            tb_mod = MOD_64QAM
            tbs_index = int(mcs_index + 5)
        elif mcs_index == 20:
            tb_mod = MOD_256QAM
            tbs_index = int(mcs_index + 5)
        elif mcs_index < 28:
            tb_mod = MOD_256QAM
            tbs_index = int(mcs_index + 6)
        elif mcs_index == 28:
            tb_mod = MOD_QPSK
            tbs_index = -1
        elif mcs_index == 29:
            tb_mod = MOD_16QAM
            tbs_index = -1
        elif mcs_index == 30:
            tb_mod = MOD_64QAM
            tbs_index = -1
        elif mcs_index == 31:
            tb_mod = MOD_256QAM
            tbs_index = -1

        if only_2nd_slot:
            # if the assigned PDSCH is transmitted only in the second slot of a subframe Qm=Q'm
            if mcs_index < 3:
                tb_mod = MOD_QPSK
            elif mcs_index < 5:
                tb_mod = MOD_16QAM
            elif mcs_index < 10:
                tb_mod = MOD_64QAM
            elif mcs_index < 27:
                tb_mod = MOD_256QAM
            elif mcs_index == 27:
                tb_mod = MOD_256QAM
                tbs_index = TBS_index_33A
    else:
        # Rel 13, if the higher layer parameter altCQI-Table-r12 is not configured
        # 36.213 - Rel 13, Table 7.1.7.1-1
        if mcs_index < 10:
            tb_mod = MOD_QPSK
            tbs_index = int(mcs_index)
        elif mcs_index < 17:
            tb_mod = MOD_16QAM
            tbs_index = int(mcs_index - 1)
        elif mcs_index < 29:
            tb_mod = MOD_64QAM
            tbs_index = int(mcs_index - 2)
        elif mcs_index == 29:
            tb_mod = MOD_QPSK
            tbs_index = -1
        elif mcs_index == 30:
            tb_mod = MOD_16QAM
            tbs_index = -1
        elif mcs_index == 31:
            tb_mod = MOD_64QAM
            tbs_index = -1

        if only_2nd_slot:
            # if the assigned PDSCH is transmitted only in the second slot of a subframe Qm=Q'm
            if mcs_index < 5:
                tb_mod = MOD_QPSK
            elif mcs_index < 10:
                tb_mod = MOD_16QAM
            elif mcs_index < 28:
                tb_mod = MOD_64QAM
            elif mcs_index == 28:
                tb_mod = MOD_64QAM
                tbs_index = TBS_index_26A

    return tbs_index, tb_mod


def mcs_idx_to_tbs_idx_and_modulation_ul(mcs_index, L_prb, cqi_request, last_tbs):
    if mcs_index <= 28:
        if mcs_index < 11:
            tb_mod = MOD_QPSK
            tbs_index = int(mcs_index)
            tbs = tbs_table[tbs_index][L_prb - 1]
            rv = 0
        elif mcs_index < 21:
            tb_mod = MOD_16QAM
            tbs_index = int(mcs_index - 1)
            tbs = tbs_table[tbs_index][L_prb - 1]
            rv = 0
        elif mcs_index < 29:
            tb_mod = MOD_64QAM
            tbs_index = int(mcs_index - 2)
            tbs = tbs_table[tbs_index][L_prb - 1]
            rv = 0
    elif mcs_index == 29 and cqi_request and L_prb <= 4:
        # 3GPP 36.213, 8.6.2 Transport block size determination
        # No transport block
        tb_mod = MOD_QPSK
        tbs = 0
        rv = 1
    elif mcs_index >= 29:
        tb_mod = -1
        tbs = int(last_tbs)
        rv = mcs_index - 28

    return tbs, tb_mod, rv


def tbs_idx_to_tbs_crnti(tbs_index, nb_prb, last_tbs):
    # tbs for C-RNTI from tbs index
    # tbs = -1 means that TBS is determined from the latest PDCCH for this TB(7.1.7.2 36.213)

    # when the transport block is transmitted in DwPTS (see 7.1.7 in 3gpp 36.213)
    tb_in_dwpts = False  # for TDD, not implemented
    if tb_in_dwpts:
        nb_prb = max(math.floor(nb_prb * 0.75), 1)

    # TBS table 36.213
    # Table 7.1.7.2.1-1: Transport block size table (dimension 34×110)
    if tbs_index >= 0:
        if tbs_index <= 33:
            tbs = tbs_table_2[tbs_index][nb_prb - 1]
        elif tbs_index == TBS_index_26A:
            tbs = tbs_table_26A[nb_prb - 1]
        elif tbs_index == TBS_index_33A:
            tbs = tbs_table_33A[nb_prb - 1]
    else:
        tbs = int(last_tbs)  # it means last TBS

    return tbs


def nb_prb_from_prb_index(prb_index, NB_CELL_PRB):
    nb_total_prb = 0
    for i in range(NB_CELL_PRB):
        if prb_index[i] == 1:
            nb_total_prb += 0.5
        elif prb_index[i] == 2:
            nb_total_prb += 0.5
        elif prb_index[i] == 3:
            nb_total_prb += 1
        else:
            nb_total_prb += 0
    return int(nb_total_prb)



# #################################################################################################
#
#                                       DCI Formats
#
# ################################################################################################

# ------------------------------ Format 0 ------------------------------------
def decode_dci_format_0(dci_format, payload, last_tbs1, last_tbs2, NB_CELL_PRB):
    nb_tb = 1
    MCSi_1 = -2
    TBS_1 = -2
    tb_mod = -2
    nb_prb = -2
    prb_index = [0] * NB_CELL_PRB
    bit_idx = 0
    MCSi_2 = -2
    TBS_2 = -2

    # ---------------------------- Format flag (1 bit) ---------------------------------
    format_flag = int(payload[bit_idx: bit_idx + 1])
    bit_idx += 1

    if format_flag == 1:
        print("Error: format 0 but flag is for dci format 1A")
        return nb_tb, MCSi_1, TBS_1, tb_mod, nb_prb, prb_index

    else:
        # flag format is set to 0

        # --------------------- Hopping Flag (1 bit) ---------------------------------
        hopping_flag = int(payload[bit_idx: bit_idx + 1])
        bit_idx += 1

        nb_bits_hopping = 0
        # -------------------- when hopping -------------------------------------------------
        if hopping_flag == 1:
            if NB_CELL_PRB < 50:
                nb_bits_hopping = 1
            else:
                nb_bits_hopping = 2

            bits_hopping = payload[bit_idx: bit_idx + nb_bits_hopping]
            hopping = int(bits_hopping, 2)
            bit_idx += nb_bits_hopping

        # ---------------- Resource block allocation -------------------------
        nb_bits_rb_assignment = math.ceil(math.log2(NB_CELL_PRB * (NB_CELL_PRB + 1) / 2)) - nb_bits_hopping

        bits_rb_allocation = payload[bit_idx: bit_idx + nb_bits_rb_assignment]
        riv = int(bits_rb_allocation, 2)
        # prb_index not implemented !
        prb_index = [0] * NB_CELL_PRB
        bit_idx += nb_bits_rb_assignment

        # --------------------Modulation and coding scheme and RV (5 bits) ----------------------
        nb_bits_mcs = 5
        bits_mcs = payload[bit_idx: bit_idx + nb_bits_mcs]
        MCSi_1 = int(bits_mcs, 2)
        bit_idx += nb_bits_mcs

        # ---------------------------- New Data indicator (1 bit) -------------------------------
        bit_idx += 1

        # ----------------------------- TPC for PUSCH (2 bits) ----------------------------------
        bit_idx += 2

        # ------------------------------ Cyclic shift for DM RS (3 bits)-------------------------
        bit_idx += 3

        # ----------------------------- UL index (TDD only) ------------------------------

        #  -------------------------- Downlink Assignment index (TDD only) --------------------

        #  -------------------------- CSI request ( 1 bits ) --------------------
        # CQI request
        bit_cqi = int(payload[bit_idx: bit_idx + 1])
        if bit_cqi == 0:
            cqi_request = False
        else:
            cqi_request = True

        bit_idx += 1

        # ---------------------------- Padding --------------------------------------
        bit_idx += 2

        # -------------------------- Transport block parameters ----------------------------
        RB_start, L_prb = vrb_parameters_from_riv(riv, NB_CELL_PRB, NB_CELL_PRB)

        TBS_1, tb_mod, rv = mcs_idx_to_tbs_idx_and_modulation_ul(MCSi_1, L_prb, cqi_request, last_tbs1)
        nb_prb = L_prb

        return nb_tb, MCSi_1, MCSi_2, TBS_1, TBS_2, nb_prb, prb_index


# ---------------------------------------------------------------------------------------------
#                               Format 1
# ---------------------------------------------------------------------------------------------
def decode_dci_format_1(payload, last_tbs1, last_tbs2, NB_CELL_PRB):
    # Format1 can be resource allocation type 0 or type 1

    nb_tb = 1
    MCSi_2 = -2
    TBS_2 = -2

    bit_idx = 0

    # Resource allocation header
    if NB_CELL_PRB == 6:  # 1.4 MHz
        nb_bits_header = 0
        ra_type = 0  # 3GPP TS 36.213
    else:
        nb_bits_header = 1
        ra_type = int(payload[bit_idx: bit_idx + nb_bits_header])

    bit_idx += nb_bits_header

    # Resource block allocation

    # Resource block group size
    P = resource_block_group_size(NB_CELL_PRB)

    # Number of bits for resource allocation
    nb_bits_rb_assignment = math.ceil(NB_CELL_PRB / P)

    if ra_type == 0:
        # all bits for resource allocation is used for bitmap
        bitmap = payload[bit_idx: bit_idx + nb_bits_rb_assignment]

        # Physical resource allocation index
        prb_index = prb_index_ra_type0(bitmap, NB_CELL_PRB)
        bit_idx += nb_bits_rb_assignment

    else:
        # subsets
        nb_bits_subsets = math.ceil(math.log2(P))
        bits_subset = payload[bit_idx: bit_idx + nb_bits_subsets]
        subset = int(bits_subset, 2)
        bit_idx += nb_bits_subsets

        # shift
        nb_bits_shift = 1
        bit_shift = int(payload[bit_idx: bit_idx + nb_bits_shift])
        shift_is_used = int(bit_shift)
        bit_idx += nb_bits_shift

        # bitmap to PRB index
        nb_bits_bitmap = nb_bits_rb_assignment - nb_bits_subsets - nb_bits_shift
        bitmap = payload[bit_idx: bit_idx + nb_bits_bitmap]
        prb_index = prb_index_ra_type1(subset, shift_is_used, nb_bits_bitmap, bitmap,NB_CELL_PRB)
        bit_idx += nb_bits_bitmap

    # Number of physical resource blocks to be used by the CRNTI
    nb_prb = nb_prb_from_prb_index(prb_index, NB_CELL_PRB)

    # Modulation and coding scheme
    nb_bits_mcs = 5
    bits_mcs = payload[bit_idx: bit_idx + nb_bits_mcs]
    MCSi_1 = int(bits_mcs, 2)
    bit_idx += nb_bits_mcs

    # HARQ Process number
    bit_idx += 3

    # New data indicator
    bit_idx += 1

    # Redundancy version
    bit_idx += 2

    # TPC command for PUCCH
    bit_idx += 2

    # Padding
    if NB_CELL_PRB == 15:  # 3MHz
        nb_bits_padding = 1
    else:
        nb_bits_padding = 0
    bit_idx += nb_bits_padding

    # Transport block parameters
    tbs_index, tb_mod = mcs_idx_to_tbs_idx_and_modulation_dl(MCSi_1, nb_prb, altCQI_table_r12, False, SRSLTE_DCI_FORMAT1)
    TBS_1 = tbs_idx_to_tbs_crnti(tbs_index, nb_prb, last_tbs1)

    return nb_tb, MCSi_1, MCSi_2, TBS_1, TBS_2, nb_prb, prb_index


# -----------------------------------------------------------------------------------
#                                    Format 1A
# -----------------------------------------------------------------------------------
def decode_dci_format_1a(is_common_rnti, payload, last_tbs1, last_tbs2, NB_CELL_PRB):
    dci_format = SRSLTE_DCI_FORMAT1A
    nb_tb = 1
    MCSi_2 = -2
    TBS_2 = -2

    bit_idx = 0

    # ------------ Format flag (1 bit) --------------------
    format_flag = int(payload[bit_idx: bit_idx + 1])
    bit_idx += 1

    if format_flag == 0:
        print("Error: format 1A but flag is for dci format 0")
        return ERROR_DCI, ERROR_DCI, ERROR_DCI, ERROR_DCI

    else:
        # flag format is set to 1

        # Localised/distributed VRB Assignment Flag (1 bit)
        # 0: localized
        # 1: distributed
        if int(payload[bit_idx: bit_idx + 1]) == 0:
            is_localized_vrb = True
        else:
            is_localized_vrb = False
        bit_idx += 1

        # resource block allocation
        nb_bits_rb_assignment = math.ceil(math.log2(NB_CELL_PRB * (NB_CELL_PRB + 1) / 2))
        bitmap = payload[bit_idx: bit_idx + nb_bits_rb_assignment]

        prb_index = prb_index_ra_type2(dci_format, is_common_rnti, is_localized_vrb, bitmap, NB_CELL_PRB)
        nb_prb = nb_prb_from_prb_index(prb_index, NB_CELL_PRB)

        bit_idx += nb_bits_rb_assignment

        # Modulation and Coding Scheme
        nb_bits_mcs = 5
        bits_mcs = payload[bit_idx: bit_idx + nb_bits_mcs]
        MCSi_1 = int(bits_mcs, 2)
        bit_idx += nb_bits_mcs

        # HARQ Process Number
        bit_idx += 3

        # New data indicator
        bit_idx += 1

        # Redundancy version
        bit_idx += 2

        # TPC command for PUCCH
        # From 3gpp 36.212
        # most_significant_bit: reserved
        # least_significant_bit: indicates column N_{prb}^{1A} of the TBS table

        most_significant_bit = int(payload[bit_idx: bit_idx + 1])
        bit_idx += 1
        least_significant_bit = int(payload[bit_idx: bit_idx + 1])

        if least_significant_bit == 0:
            N_prb_1A = 2
        else:
            N_prb_1A = 3

        bit_idx += 2
        # Padding
        if NB_CELL_PRB == 6 or NB_CELL_PRB == 25 or NB_CELL_PRB == 50:
            bit_idx += 1

        #  Transport block parameters
        if is_common_rnti:
            tb_mod = MOD_QPSK  # always for common RNTI 7.1.7.1 from 3gpp 36.213
            if MCSi_1 <= 26:
                tbs_index = MCSi_1
                TBS_1 = tbs_idx_to_tbs_crnti(tbs_index, N_prb_1A, last_tbs1)
            else:
                TBS_1 = ERROR_DCI
        else:
            tbs_index, tb_mod = mcs_idx_to_tbs_idx_and_modulation_dl(MCSi_1, nb_prb, altCQI_table_r12, False, SRSLTE_DCI_FORMAT1A)
            TBS_1 = tbs_idx_to_tbs_crnti(tbs_index, nb_prb, last_tbs1)

        return nb_tb, MCSi_1, MCSi_2, TBS_1, TBS_2, nb_prb, prb_index


# ---------------------------------------------------------------------------------------
#                                       Format 1C
# ---------------------------------------------------------------------------------------
def decode_dci_format_1c(payload, last_tbs1, last_tbs2, NB_CELL_PRB):
    dci_format = SRSLTE_DCI_FORMAT1C
    is_common_rnti = True
    is_localized_vrb = False
    nb_tb = 1  # number of transport blocks
    MCSi_2 = -2  # mcs index, from 0 to 31
    TBS_2 = -2  # transport block size, tbs =-1 means last TBS

    bit_idx = 0

    # -------------------------- Resource Block Allocation ------------------------
    # Gap bit only when NB_CELL_PRB >= 50,
    # gab bit is included in bitmap and it is decoded in prb_index_ra_type2
    if NB_CELL_PRB < 50:
        n_step = 2
    else:
        n_step = 4
    Ngap = ra_type2_Ngap(1, NB_CELL_PRB)
    N_vrb = 2 * min(Ngap, NB_CELL_PRB - Ngap)

    nb_bits_rb_assignment = 1 + math.ceil(math.log2(math.floor(N_vrb / n_step) * (math.floor(N_vrb / n_step) + 1) / 2))

    bitmap = payload[bit_idx: bit_idx + nb_bits_rb_assignment]
    prb_index = prb_index_ra_type2(dci_format, is_common_rnti, is_localized_vrb, bitmap, NB_CELL_PRB)

    # Number of physical resource blocks to be used by the CRNTI
    # When distributed type-2 is used, each slot in a PRB has an index
    # There is a prb_index for slot 0 (even) and a prb_index for slot 1 (odd)
    # The number of RBs for slot 0 is equal to the number of RBs for slot 1
    # Then, the total number of PRB is equal to 2x number of RBs for slot 0:

    nb_prb = nb_prb_from_prb_index(prb_index, NB_CELL_PRB)

    bit_idx += nb_bits_rb_assignment

    # ----------------------------- Modulation and Coding Scheme --------------------------
    nb_bits_mcs = 5
    bits_mcs = payload[bit_idx: bit_idx + nb_bits_mcs]
    MCSi_1 = int(bits_mcs, 2)
    bit_idx += nb_bits_mcs

    # ------------------------------ Transport block parameters ---------------------------
    # tb_mod[0] = MOD_QPSK
    TBS_1 = tbs_format1c_table[MCSi_1]

    return nb_tb, MCSi_1, MCSi_2, TBS_1, TBS_2, nb_prb, prb_index


# ------------------------------------------------------------------------------------------
#                                       Format 1B
# ------------------------------------------------------------------------------------------
def decode_dci_format_1b(payload, last_tbs1, last_tbs2, NB_CELL_PRB):
    dci_format = SRSLTE_DCI_FORMAT1B
    is_common_rnti = False
    nb_tb = 1
    MCSi_2 = -2
    TBS_2 = -2

    bit_idx = 0

    # ---------------- Localised/distributed VRB Assignment Flag ----------------
    # 0: localized
    # 1: distributed
    if payload[bit_idx: bit_idx + 1] == 0:
        is_localized_vrb = True
    else:
        is_localized_vrb = False
    bit_idx += 1

    # --------------------- Resource block allocation ----------------------------
    nb_bits_rb_assignment = math.ceil(math.log2(NB_CELL_PRB * (NB_CELL_PRB + 1) / 2))
    bitmap = payload[bit_idx: bit_idx + nb_bits_rb_assignment]

    prb_index = prb_index_ra_type2(dci_format, is_common_rnti, is_localized_vrb, bitmap, NB_CELL_PRB)

    # Number of physical resource blocks to be used by the CRNTI
    # When distributed type-2 is used, each slot in a PRB has an index
    # There is a prb_index for slot 0 (even) and a prb_index for slot 1 (odd)
    # The number of RBs for slot 0 is equal to the number of RBs for slot 1
    # Then, the total number of PRB is equal to 2x number of RBs for slot 0:

    nb_prb = nb_prb_from_prb_index(prb_index, NB_CELL_PRB)

    bit_idx += nb_bits_rb_assignment

    # --------------- Modulation and Coding Scheme --------------------------
    nb_bits_mcs = 5
    bits_mcs = payload[bit_idx: bit_idx + nb_bits_mcs]
    MCSi_1 = int(bits_mcs, 2)
    bit_idx += nb_bits_mcs

    # -------------------- HARQ Process number --------------------------------
    # New data indicator
    # Redundancy version
    # TPC Command for PUCCH
    # TPMI Precoding Information
    # PMI confirmation for precoding
    # Padding

    # -------------------------- Transport block parameters -------------------
    tbs_index, tb_mod = mcs_idx_to_tbs_idx_and_modulation_dl(MCSi_1, nb_prb, altCQI_table_r12, False, SRSLTE_DCI_FORMAT1B)
    TBS_1 = tbs_idx_to_tbs_crnti(tbs_index, nb_prb, last_tbs1)

    return nb_tb, MCSi_1, MCSi_2, TBS_1, TBS_2, nb_prb, prb_index


# --------------------------------------------------------------------------------------------
#                            Format 1D
# --------------------------------------------------------------------------------------------
def decode_dci_format_1d(payload, last_tbs1, last_tbs2, NB_CELL_PRB):
    dci_format = SRSLTE_DCI_FORMAT1D
    is_common_rnti = False
    nb_tb = 1
    MCSi_2 = -2
    TBS_2 = -2

    bit_idx = 0

    # ---------------- Localised/distributed VRB Assignment Flag ----------------
    # 0: localized
    # 1: distributed
    if payload[bit_idx: bit_idx + 1] == 0:
        is_localized_vrb = True
    else:
        is_localized_vrb = False
    bit_idx += 1

    # --------------------- Resource block allocation ----------------------------
    nb_bits_rb_assignment = math.ceil(math.log2(NB_CELL_PRB * (NB_CELL_PRB + 1) / 2))
    bitmap = payload[bit_idx: bit_idx + nb_bits_rb_assignment]

    prb_index = prb_index_ra_type2(dci_format, is_common_rnti, is_localized_vrb, bitmap, NB_CELL_PRB)

    # Number of physical resource blocks to be used by the CRNTI
    # When distributed type-2 is used, each slot in a PRB has an index
    # There is a prb_index for slot 0 (even) and a prb_index for slot 1 (odd)
    # The number of RBs for slot 0 is equal to the number of RBs for slot 1
    # Then, the total number of PRB is equal to 2x number of RBs for slot 0:

    nb_prb = nb_prb_from_prb_index(prb_index, NB_CELL_PRB)

    bit_idx += nb_bits_rb_assignment

    # --------------- Modulation and Coding Scheme --------------------------
    nb_bits_mcs = 5
    bits_mcs = payload[bit_idx: bit_idx + nb_bits_mcs]
    MCSi_1 = int(bits_mcs, 2)
    bit_idx += nb_bits_mcs

    # ----------------------- HARQ Process number ---------------------------
    # New data indicator
    # Redundancy version
    # TPC Command for PUCCH
    # TPMI Precoding Information
    # PMI confirmation for precoding
    # Downlink Power Offset
    # Padding

    # -------------------------- Transport block parameters -------------------
    tbs_index, tb_mod = mcs_idx_to_tbs_idx_and_modulation_dl(MCSi_1, nb_prb, altCQI_table_r12, False, SRSLTE_DCI_FORMAT1D)
    TBS_1 = tbs_idx_to_tbs_crnti(tbs_index, nb_prb, last_tbs1)

    return nb_tb, MCSi_1, MCSi_2, TBS_1, TBS_2, nb_prb, prb_index


# ------------------------------------------------------------------------------
#                                   Format 2
# ------------------------------------------------------------------------------
def decode_dci_format_2(payload, last_tbs1, last_tbs2, NB_CELL_PRB):
    # resource allocation type 0 and type 1
    nb_tb = 0  # number of transport blocks, it may be 1 or 2
    prb_index = [0] * NB_CELL_PRB  # PRBs assignment, a PRB has two slots

    bit_idx = 0
    # ---------------------- Resource allocation header (0 or 1 bit)----------------------
    if NB_CELL_PRB == 6:  # 1.4 MHz
        nb_bits_header = 0
        ra_type = 0  # 3GPP TS 36.213
    else:
        nb_bits_header = 1
        ra_type = int(payload[bit_idx: bit_idx + nb_bits_header])

    bit_idx += nb_bits_header

    # ---------------------- Resource block allocation ------------------

    # Resource block group size
    P = resource_block_group_size(NB_CELL_PRB)

    # Number of bits for resource allocation
    nb_bits_rb_assignment = math.ceil(NB_CELL_PRB / P)

    if ra_type == 0:
        # all bits for resource allocation is used for bitmap
        bitmap = payload[bit_idx: bit_idx + nb_bits_rb_assignment]

        # Physical resource allocation index
        prb_index = prb_index_ra_type0(bitmap, NB_CELL_PRB)

        bit_idx += nb_bits_rb_assignment

    elif ra_type == 1:
        # subsets
        nb_bits_subsets = math.ceil(math.log2(P))
        bits_subset = payload[bit_idx: bit_idx + nb_bits_subsets]
        subset = int(bits_subset, 2)
        bit_idx += nb_bits_subsets

        # shift
        nb_bits_shift = 1
        bit_shift = int(payload[bit_idx: bit_idx + nb_bits_shift])
        shift_is_used = int(bit_shift)
        bit_idx += nb_bits_shift

        # bitmap to PRB index
        nb_bits_bitmap = nb_bits_rb_assignment - nb_bits_subsets - nb_bits_shift
        bitmap = payload[bit_idx: bit_idx + nb_bits_bitmap]
        prb_index = prb_index_ra_type1(subset, shift_is_used, nb_bits_bitmap, bitmap, NB_CELL_PRB)
        bit_idx += nb_bits_bitmap
    # Number of physical resource blocks to be used by the CRNTI
    nb_prb = nb_prb_from_prb_index(prb_index, NB_CELL_PRB)

    #  ------------------------ TPC Command for PUCCH (2 bits) -----------------------
    nb_bits_tcp = 2
    bit_idx += nb_bits_tcp

    #  ------------------ Downlink Assignment Index (2 bits, only TDD) ---------------–
    if is_tdd:
        bit_idx += 2

    #  ----------------- HARQ Process number (3 bits FDD, 4 bits TDD) ----------------
    if is_tdd:
        bit_idx += 4
    else:
        bit_idx += 3

    # ------------------ Transport block to codeword swap flag (1 bit) ---------------------------
    codeword_flag = int(payload[bit_idx: bit_idx + 1])
    bit_idx += 1

    # ----------------------------------- Transport block 1 (8 bits) --------------------------------

    # Modulation and coding scheme (5 bits)
    nb_bits_mcs = 5
    bits_mcs = payload[bit_idx: bit_idx + nb_bits_mcs]
    MCSi_1 = int(bits_mcs, 2)
    bit_idx += nb_bits_mcs

    # New data indicator (1 bits)
    bit_idx += 1

    # Redundancy version (2 bits)
    bits_rv1 = payload[bit_idx: bit_idx + 2]
    # rv1 =
    rv1 = int(bits_rv1, 2)
    bit_idx += 2

    # Enable/Disable TB
    if rv1 == 1 and MCSi_1 == 0:
        is_tb1_enable = False
        MCSi_1 = -2
        TBS_1 = -2
    else:
        is_tb1_enable = True
        nb_tb += 1
        tbs_index_1, tb_mod_1 = mcs_idx_to_tbs_idx_and_modulation_dl(MCSi_1, nb_prb, altCQI_table_r12, False, SRSLTE_DCI_FORMAT2)
        TBS_1 = tbs_idx_to_tbs_crnti(tbs_index_1, nb_prb, last_tbs1)

    # ------------------------------- Transport block 2 (8 bits) ---------------------------------
    # Modulation and coding scheme (5 bits)
    nb_bits_mcs = 5
    bits_mcs = payload[bit_idx: bit_idx + nb_bits_mcs]
    MCSi_2 = int(bits_mcs, 2)
    bit_idx += nb_bits_mcs

    # New data indicator (1 bits)
    bit_idx += 1

    # Redundancy version (2 bits)
    bits_rv2 = payload[bit_idx: bit_idx + 2]
    rv2 = int(bits_rv2, 2)
    bit_idx += 2

    # Enable/Disable TB
    if rv2 == 1 and MCSi_2 == 0:
        is_tb2_enable = False
        MCSi_2 = -2
        TBS_2 = -2
    else:
        is_tb2_enable = True
        nb_tb += 1
        tbs_index_2, tb_mod_2 = mcs_idx_to_tbs_idx_and_modulation_dl(MCSi_2, nb_prb, altCQI_table_r12, False, SRSLTE_DCI_FORMAT2)
        TBS_2 = tbs_idx_to_tbs_crnti(tbs_index_2, nb_prb, last_tbs2)

    # ------------------- Precoding information (3 bits) -----------------------------
    bit_idx += 3

    return nb_tb, MCSi_1, MCSi_2, TBS_1, TBS_2, nb_prb, prb_index


# ------------------------------------------------------------------------------------
#
#                                      Format 2A
#
# ------------------------------------------------------------------------------------
def decode_dci_format_2a(payload, last_tbs1, last_tbs2,NB_CELL_PRB):
    # resource allocation type 0 and type 1
    nb_tb = 0  # number of transport blocks, it may be 1 or 2

    bit_idx = 0
    # ---------------------- Resource allocation header (0 or 1 bit )----------------------
    if NB_CELL_PRB == 6:  # 1.4 MHz
        nb_bits_header = 0
        ra_type = 0  # 3GPP TS 36.213
    else:
        nb_bits_header = 1
        ra_type = int(payload[bit_idx: bit_idx + nb_bits_header])

    bit_idx += nb_bits_header

    # ---------------------- Resource block allocation (10MHz: 17 bits, 15MHz: 19 bits,)------------------

    # Resource block group size
    P = resource_block_group_size(NB_CELL_PRB)

    # Number of bits for resource allocation
    nb_bits_rb_assignment = math.ceil(NB_CELL_PRB / P)

    if ra_type == 0:
        # all bits for resource allocation is used for bitmap
        bitmap = payload[bit_idx: bit_idx + nb_bits_rb_assignment]

        # Physical resource allocation index
        prb_index = prb_index_ra_type0(bitmap, NB_CELL_PRB)

        bit_idx += nb_bits_rb_assignment

    elif ra_type == 1:
        # subsets
        nb_bits_subsets = math.ceil(math.log2(P))
        bits_subset = payload[bit_idx: bit_idx + nb_bits_subsets]
        subset = int(bits_subset, 2)
        bit_idx += nb_bits_subsets

        # shift
        nb_bits_shift = 1
        bit_shift = int(payload[bit_idx: bit_idx + nb_bits_shift])
        shift_is_used = int(bit_shift)
        bit_idx += nb_bits_shift

        # bitmap to PRB index
        nb_bits_bitmap = nb_bits_rb_assignment - nb_bits_subsets - nb_bits_shift
        bitmap = payload[bit_idx: bit_idx + nb_bits_bitmap]
        prb_index = prb_index_ra_type1(subset, shift_is_used, nb_bits_bitmap, bitmap, NB_CELL_PRB)
        bit_idx += nb_bits_bitmap

    # Number of physical resource blocks to be used by the CRNTI
    nb_prb = nb_prb_from_prb_index(prb_index, NB_CELL_PRB)

    #  ------------------------ TPC Command for PUCCH (2 bits) -----------------------
    nb_bits_tcp = 2
    bit_idx += nb_bits_tcp

    #  ------------------ Downlink Assignment Index (2 bits, only TDD) ---------------–
    if is_tdd:
        bit_idx += 2

    #  ----------------- HARQ Process number (3 bits FDD, 4 bits TDD) ----------------
    if is_tdd:
        bit_idx += 4
    else:
        bit_idx += 3

    # ------------------ Transport block to codeword swap flag (1 bit) ---------------------------
    codeword_flag = int(payload[bit_idx: bit_idx + 1])
    bit_idx += 1

    # ----------------------------------- Transport block 1 ------------------------------------

    # Modulation and coding scheme (5 bits)
    nb_bits_mcs = 5
    bits_mcs = payload[bit_idx: bit_idx + nb_bits_mcs]
    MCSi_1 = int(bits_mcs, 2)
    bit_idx += nb_bits_mcs

    # New data indicator (1 bits)
    bit_idx += 1

    # Redundancy version (2 bits)
    bits_rv1 = payload[bit_idx: bit_idx + 2]
    rv1 = int(bits_rv1, 2)
    bit_idx += 2

    # Enable/Disable TB
    if rv1 == 1 and MCSi_1 == 0:
        is_tb1_enable = False
        MCSi_1 = -2
        TBS_1 = -2
    else:
        is_tb1_enable = True
        nb_tb += 1
        tbs_index_1, tb_mod_1 = mcs_idx_to_tbs_idx_and_modulation_dl(MCSi_1, nb_prb, altCQI_table_r12, False, SRSLTE_DCI_FORMAT2A)
        TBS_1 = tbs_idx_to_tbs_crnti(tbs_index_1, nb_prb, last_tbs1)

    # ------------------------------- Transport block 2 ------------------------------------
    # Modulation and coding scheme (5 bits)
    nb_bits_mcs = 5
    bits_mcs = payload[bit_idx: bit_idx + nb_bits_mcs]
    MCSi_2 = int(bits_mcs, 2)
    bit_idx += nb_bits_mcs

    # New data indicator (1 bits)
    bit_idx += 1

    # Redundancy version (2 bits)
    bits_rv2 = payload[bit_idx: bit_idx + 2]
    rv2 = int(bits_rv2, 2)
    bit_idx += 2

    # Enable/Disable TB
    if rv2 == 1 and MCSi_2 == 0:
        is_tb2_enable = False
        MCSi_2 = -2
        TBS_2 = -2
    else:
        is_tb2_enable = True
        nb_tb += 1
        tbs_index_2, tb_mod_2 = mcs_idx_to_tbs_idx_and_modulation_dl(MCSi_2, nb_prb, altCQI_table_r12, False, SRSLTE_DCI_FORMAT2A)
        TBS_2 = tbs_idx_to_tbs_crnti(tbs_index_2, nb_prb, last_tbs2)

    # ----------------------- Padding (1 bit) --------------------------------
    bit_idx += 1

    return nb_tb, MCSi_1, MCSi_2, TBS_1, TBS_2, nb_prb, prb_index


# ------------------------------------------------------------------------------------
#
#                                      Format 2B
#
# ------------------------------------------------------------------------------------

# not implemeted !


#########################################################################################
#
#                                       DCI decoder
#
#########################################################################################
def decode_dci_payload(is_common_rnti, dci_format, payload, last_tbs1, last_tbs2, NB_CELL_PRB):
    # Formats
    if dci_format == SRSLTE_DCI_FORMAT0:
        return decode_dci_format_0(dci_format, payload, last_tbs1, last_tbs2, NB_CELL_PRB)

    elif dci_format == SRSLTE_DCI_FORMAT1:
        return decode_dci_format_1(payload, last_tbs1, last_tbs2, decode_dci_format_1, NB_CELL_PRB)

    elif dci_format == SRSLTE_DCI_FORMAT1A:
        return decode_dci_format_1a(is_common_rnti, payload, last_tbs1, last_tbs2, NB_CELL_PRB)

    elif dci_format == SRSLTE_DCI_FORMAT1C:
        return decode_dci_format_1c(payload, last_tbs1, last_tbs2, NB_CELL_PRB)

    elif dci_format == SRSLTE_DCI_FORMAT1B:
        return decode_dci_format_1b(payload, last_tbs1, last_tbs2, NB_CELL_PRB)

    elif dci_format == SRSLTE_DCI_FORMAT1D:
        return decode_dci_format_1d(payload, last_tbs1, last_tbs2, NB_CELL_PRB)

    elif dci_format == SRSLTE_DCI_FORMAT2:
        return decode_dci_format_2(payload, last_tbs1, last_tbs2, NB_CELL_PRB)

    elif dci_format == SRSLTE_DCI_FORMAT2A:
        return decode_dci_format_2a(payload, last_tbs1, last_tbs2, NB_CELL_PRB)

    else:
        nb_tb = 0  # number of transport blocks, it may be 1 or 2
        nb_prb = -2  # number of PRBs
        prb_index = np.zeros((1, NB_CELL_PRB)).astype(int)

        print("Error: Invalid DCI format")
        MCSi_1 = -2
        MCSi_2 = -2
        TBS_1 = -2
        TBS_2 = -2
        return nb_tb, MCSi_1, MCSi_2, TBS_1, TBS_2, nb_prb, prb_index



def main():
    parser = argparse.ArgumentParser(description="DCI Decoder")
    parser.add_argument("-t", "--trace_name", required=True,
                        help="TraceName in the format 'TraceYYYYMMDD_HHMMSS.csv'")
    parser.add_argument("-e", "--earfcn", type=int, required=True, help="EARFCN value")
    args = parser.parse_args()

    base, _ = os.path.splitext(args.trace_name)
    TraceName = base
    earfcn = args.earfcn

    print(f"TraceName: {TraceName}")
    print(f"EARFCN: {earfcn}")

    # csv file path
    PATH_corrected = TraceName + "_corrected.csv"
    PATH_dci = TraceName + '_DCIdecoded.csv'
    PATH_filter = TraceName + '_filter.csv'

    # cellular operator information
    if earfcn == 900:
        # only for testbed
        operator = "Amarisoft"
        f_dl = 1800  # in MHz
        Bw = 10  # in MHz
    elif earfcn == 9385:
        operator = "Bouygues"
        Bw = 5  # in MHz
        f_dl = 775.5  # in MHz
    elif earfcn == 6200:
        operator = "Bouygues"
        Bw = 10  # in MHz
        f_dl = 796  # in MHz
    elif earfcn == 1850:
        operator = "Bouygues"
        Bw = 20  # in MHz
        f_dl = 1870  # in MHz
    elif earfcn == 227:
        operator = "Bouygues"
        Bw = 15  # in MHz
        f_dl = 2132.7  # in MHz
    elif earfcn == 3175:
        operator = "Bouygues"
        Bw = 15  # in MHz
        f_dl = 2662.5  # in MHz
    elif earfcn == 9310:
        operator = "Orange"
        Bw = 10  # in MHz
        f_dl = 768  # in MHz
    elif earfcn == 6400:
        operator = "Orange"
        Bw = 10  # in MHz
        f_dl = 816  # in MHz
    elif earfcn == 1300:
        operator = "Orange"
        Bw = 20  # in MHz
        f_dl = 1815  # in MHz
    elif earfcn == 325:
        operator = "Orange"
        Bw = 5  # in MHz
        f_dl = 2142.5  # in MHz
    elif earfcn == 525:
        operator = "Orange"
        Bw = 15  # in MHz
        f_dl = 2162.5  # in MHz
    elif earfcn == 3000:
        operator = "Orange"
        Bw = 20  # in MHz
        f_dl = 2645  # in MHz
    elif earfcn == 9235:
        operator = "SFR"
        Bw = 5  # in MHz
        f_dl = 760.5  # in MHz
    elif earfcn == 6300:
        operator = "SFR"
        Bw = 10  # in MHz
        f_dl = 806  # in MHz
    elif earfcn == 1501:
        operator = "SFR"
        Bw = 20  # in MHz
        f_dl = 1835  # in MHz
    elif earfcn == 78:
        operator = "SFR"
        Bw = 15  # in MHz
        f_dl = 2117.8  # in MHz
    elif earfcn == 424:
        operator = "SFR"
        Bw = 5  # in MHz
        f_dl = 2152.4  # in MHz
    elif earfcn == 2825:
        operator = "SFR"
        Bw = 15  # in MHz
        f_dl = 2627.5  # in MHz
    elif earfcn == 9460:
        operator = "Free"
        Bw = 10  # in MHz
        f_dl = 783  # in MHz
    elif earfcn == 1675:
        operator = "Free"
        Bw = 15  # in MHz
        f_dl = 1852.5  # in MHz
    elif earfcn == 3350:
        operator = "Free"
        Bw = 20  # in MHz
        f_dl = 2680  # in MHz
    elif earfcn == 375:
        operator = "Free"
        Bw = 5  # in MHz
        f_dl = 2147.5  # in MHz

    # Bandwidth to cell PRBs
    if Bw == 5:
        NB_CELL_PRB = 25
    elif Bw == 10:
        NB_CELL_PRB = 50
    elif Bw == 15:
        NB_CELL_PRB = 75
    elif Bw == 20:
        NB_CELL_PRB = 100
    else:
        print("Error NB_CELL_PRB!")


    # %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    #
    #                               Time correction
    #
    # %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    # This section of the code reads the CSV file created by the LTE analyzer in chunks and performs time correction.
    # The goal is to align the timestamp from the LTE analyzer with the SFN (System Frame Number) of the DCI message.
    # The timestamp is provided in Unix timestamp format in UTC, while the SFN varies from 0 to 10239.

    # It calculates the time and SFN differences, corrects any discrepancies in the SFN value based on time differences,
    # and creates a new 'Adjusted_Time' column to ensure a consistent chronological order in the data.

    # The corrected data is then saved to a new CSV file, preserving the corrected timestamps and SFN values.
    # The code is used for the processing of extensive CSV files (several tens of gigabytes)

    if time_correction_phase:
        print(" ********* Decoding DCI payload ********** ")

        # Define file paths and parameters
        PATH_file = TraceName + ".csv"
        chunksize = 100000 #
        last_rows = 160

        i = 0
        data_df1 = None

        # Iterate through the data in chunks
        for data_df in pd.read_csv(PATH_file, chunksize=chunksize, dtype={'dci_payload': 'str'}, low_memory=False):
            if i > 0:
                data_df = pd.concat([data_df1, data_df])

            # Calculate the time and SFN difference and create a new column 'SFN_Diff_corr'
            data_df['Time_diff'] = data_df['Time'].diff()
            data_df['SFN_Diff'] = data_df['SFN'].diff()
            data_df['SFN_Diff_corr'] = data_df['SFN_Diff']

            # Correct the 'SFN_Diff_corr' based on time differences
            # If time is not missing cycles
            data_df.loc[(data_df['SFN_Diff'] < 0) & (data_df['Time_diff'] >= 10238 + data_df['SFN_Diff']) & (data_df['Time_diff'] <= 10239), 'SFN_Diff_corr'] = 10240 + data_df['SFN_Diff']
            data_df.loc[(data_df['SFN_Diff'] > 0) & (data_df['Time_diff'] <= -10240 + data_df['SFN_Diff']), 'SFN_Diff_corr'] = -10240 + data_df['SFN_Diff']


            # If time is missing cycles
            data_df.loc[(data_df['SFN_Diff'] >= 0) & (data_df['Time_diff'] > 10239), 'SFN_Diff_corr'] = (data_df['Time_diff'] // 10240) * 10240 + data_df['SFN_Diff']
            data_df.loc[(data_df['SFN_Diff'] < 0) & (data_df['Time_diff'] > 10239), 'SFN_Diff_corr'] = (data_df['Time_diff'] // 10240) * 10240 + 10240 + data_df['SFN_Diff']

            # Calculate cumulative SFN
            data_df['Cum_SFN'] = data_df['SFN_Diff_corr'].cumsum() + data_df['SFN'].iloc[0]
            data_df['Cum_SFN'] = data_df['Cum_SFN'].fillna(data_df['SFN'].iloc[0])
            data_df['Cum_SFN'] = data_df['Cum_SFN'].astype('int64')
            data_df = data_df.sort_values(['Cum_SFN']).reset_index(drop=True)

            # Adjust times and create 'Adjusted_Time' column
            data_df['Adjusted_Time'] = data_df['Cum_SFN'] - data_df['Cum_SFN'].iloc[0] + data_df['Time'].iloc[0]
            data_df['Adjusted_Time'] = data_df['Adjusted_Time'].fillna(data_df['Time'].iloc[0])
            data_df['Adjusted_Time'] = data_df['Adjusted_Time'].astype('int64')

            if i == 0:
                data_df['Time'] = data_df['Adjusted_Time']
                data_df1 = data_df.drop(range(0, len(data_df) - last_rows))
                data_df = data_df.drop(['SFN_Diff', 'Cum_SFN', 'Adjusted_Time', 'SFN_Diff_corr', 'Time_diff'], axis=1)
                data_df.iloc[:len(data_df) - last_rows].to_csv(PATH_corrected, mode='w', header=True, index=False)
            else:
                data_df['Time'] = data_df['Adjusted_Time']
                data_df1 = data_df.drop(range(0, len(data_df) - last_rows))
                data_df = data_df.drop(['SFN_Diff', 'Cum_SFN', 'Adjusted_Time', 'SFN_Diff_corr', 'Time_diff'], axis=1)
                data_df.iloc[:len(data_df) - last_rows].to_csv(PATH_corrected, mode='a', header=False, index=False)

            del data_df
            i += chunksize

        # Save the final adjusted data
        data_df1 = data_df1.drop(['SFN_Diff', 'Cum_SFN', 'Adjusted_Time', 'SFN_Diff_corr', 'Time_diff'], axis=1)
        data_df1.to_csv(PATH_corrected, mode='a', header=False, index=False)
        del data_df1

        print("Time correction completed.")
    else:
        print("\n No time correction phase ! \n\n")


    # %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    #
    #                               Decoding and performance analysis phase
    #
    # %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    # This section decodes Downlink Control Information (DCI) messages and performs performance analysis.
    # Various DCI attributes are extracted and analyzed, including time intervals, formats, and payload.
    # Decoded information is written to a new file, including added columns for analysis.

    # Finally, the monitoring period and missing subframes percentage are calculated. In each sub-frame,
    # the LTE analyzer saves the found DCI messages. If no DCI messages are found, it saves the timestamp
    # to indicate that the sub-frame was analyzed.

    # In the case of MIMO, there can be up to two transport blocks
    # nb_TB: number of enabled transport blocks (TB)
    # MCSi_1: Modulation Coding Scheme (MCS) index of the first transport block (-2: TB is disabled )
    # MCSi_2: MCS index of the second transport block (-2: TB is disabled )
    # TBS_1: TBS of first transport block (-2: TB is disabled )
    # TBS_2: TBS of second transport block (-2: TB is disabled )
    # nb_PRB: number of allocated PRBs

    if decoding_dci_phase:
        nb_dci_msg = 0

        # Performance analysis variables
        last_time_performance = 0
        total_missing_sf = 0

        # Storage for the last TBS used by the CRNTI
        # last_tbs_crnti: [last_tbs1_dl, last_tbs2_dl, last_tbs_ul], where CRNTI is the index
        last_tbs_crnti = np.zeros((65536, 3))

        with open(PATH_corrected, 'r') as file_trace, open(PATH_dci, 'w', newline='') as new_file_trace:

            csv_reader = csv.reader(file_trace)
            csv_writer = csv.writer(new_file_trace)
            columns_names = next(csv_reader)

            # Define new column names
            new_columns_names = columns_names
            new_columns_names.extend(['nb_TB', 'MCSi_1', 'MCSi_2', 'TBS_1', 'TBS_2', 'nb_PRB'])

            # Column indices
            time_column = columns_names.index('Time')
            rnti_column = columns_names.index('rnti')
            format_column = columns_names.index('format')
            payload_column = columns_names.index('dci_payload')

            csv_writer.writerow(new_columns_names)

            is_first_row = True
            for line in file_trace:
                nb_dci_msg += 1
                line = line.strip()
                data_trace = line.split(',')

                if len(data_trace) < 5:
                    print("ERROR: Number of columns < 5")
                    continue

                # Trace information
                current_time = int(data_trace[time_column])
                current_rnti = int(float(data_trace[rnti_column]))

                # Performance analysis
                if is_first_row:
                    first_time_trace = current_time
                    last_time_performance = current_time
                    is_first_row = False

                # Calculate the difference between two consecutive sub-frames
                diff_sf = current_time - last_time_performance
                if diff_sf < 0:
                    print("Error during correction phase in current_time =", current_time)
                elif diff_sf > 2:
                    # Count missing sub-frames based on the timestamp
                    total_missing_sf += diff_sf
                last_time_performance = current_time

                if current_rnti > 0:
                    # Proceed only if RNTI is found
                    format_dci = int(float(data_trace[format_column]))
                    payload = data_trace[payload_column]

                    # Decode DCI payload
                    is_common = not (10 < current_rnti < 65534) # RA-RNTI, P-RNTI, SI-RNTI

                    # Determine the last TBS used
                    if format_dci > 0:
                        last_TBS1, last_TBS2 = last_tbs_crnti[current_rnti, 0], last_tbs_crnti[current_rnti, 1]
                    else:
                        last_TBS1, last_TBS2 = last_tbs_crnti[current_rnti, 2], -2

                    # Call the function to decode the DCI payload
                    nb_tb, MCSi_1, MCSi_2, TBS_1, TBS_2, nb_prb, idx_prb = decode_dci_payload(is_common, format_dci, payload, last_TBS1, last_TBS2, NB_CELL_PRB)

                    # Append the decoded values to the data trace
                    new_data_trace = data_trace + [nb_tb, MCSi_1, MCSi_2, TBS_1, TBS_2, nb_prb]

                    # Write the updated row to the new CSV file
                    csv_writer.writerow(new_data_trace)

                    # Update the last TBS used
                    if format_dci > 0:
                        if TBS_1 >= 0:
                            last_tbs_crnti[current_rnti, 0] = TBS_1
                        if TBS_2 >= 0:
                            last_tbs_crnti[current_rnti, 1] = TBS_2
                    else:
                        if TBS_1 >= 0:
                            last_tbs_crnti[current_rnti, 2] = TBS_1

            total_monitoring_sf = last_time_performance - first_time_trace
            time_not_monitored_perc = 100 * total_missing_sf / total_monitoring_sf

            print("Monitoring period (in seconds):", total_monitoring_sf / 1000)
            print("Missing subframes (in seconds):", total_missing_sf / 1000)
            print("Missing subframes (%):", np.round(time_not_monitored_perc, 4))
            print("\n")

    else:
        print("\nNo decoding phase!\n\n")



    # %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    #
    #                               Histogram filter phase
    #
    # %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    # The goal of this section is to remove potential false DCI messages that may not have been detected by the LTEanalyzer.
    # A DCI message is considered valid if there is at least one other DCI message within the time interval between
    # activity_wds milliseconds before and activity_wds milliseconds after the analyzed DCI message.

    # Part 1: Searching for false positives
    # This part analyzes data in a file and identifies false positives

    # Part 2: Dropping false positives
    # This part processes the data again, eliminating rows corresponding to false positives.

    if histogram_filter_phase:
        # Initialize lists for tracking CRNTI information and create an empty list for false positives
        crnti_last_t = [0] * 65536
        diff_last_interarrival = [0] * 65536
        last_line_crnti = [0] * 65536
        false_positive_list = []


        # Part 1: Searching for false positives
        with open(PATH_dci, 'r') as file_trace:
            csv_reader = csv.reader(file_trace)
            columns_names = next(csv_reader)

            idx_line = 0

            for line in file_trace:
                data_trace = line.split(',')
                current_time, current_rnti = map(int, map(float, data_trace[:2]))

                if 10 < current_rnti < 65534:
                    # Calculate the time difference between subframes
                    diff_t_crnti = abs(crnti_last_t[current_rnti] - current_time)

                    # Check for a new connection and record false positives
                    if diff_t_crnti > activity_wds and diff_last_interarrival[current_rnti] > activity_wds:
                        false_positive_list.append(last_line_crnti[current_rnti])

                    last_line_crnti[current_rnti] = idx_line
                    diff_last_interarrival[current_rnti] = diff_t_crnti
                    crnti_last_t[current_rnti] = current_time
                idx_line += 1

            for i in range(65536):
                if diff_last_interarrival[i] > activity_wds:
                    false_positive_list.append(last_line_crnti[i])

            false_positive_list.sort()

        # Part 2: Dropping false positives
        with open(PATH_dci, 'r') as file_trace, open(PATH_filter, 'w', newline='') as new_file_trace:
            csv_reader = csv.reader(file_trace)
            csv_writer = csv.writer(new_file_trace)
            columns_names = next(csv_reader)
            csv_writer.writerow(columns_names)

            idx_line = 0
            false_positive_idx = 0

            for line in file_trace:
                data_trace = line.split(',')
                current_time, current_rnti = map(int, map(float, data_trace[:2]))

                new_data_trace = data_trace.copy()

                if not false_positive_list:
                    # If there are no false positives, write the line to the new file
                    csv_writer.writerow(new_data_trace)
                else:
                    if idx_line != false_positive_list[false_positive_idx]:
                        # If the current line is not a false positive, write it to the new file
                        csv_writer.writerow(new_data_trace)
                    elif false_positive_idx < (len(false_positive_list) - 1):
                        # Move to the next false positive if more are in the list
                        false_positive_idx += 1
                idx_line += 1
    else:
        # If we are not in the filtering phase, display a message
        print("\n No filtering phase ! \n\n")


    #####################################################################################
    # Adding connection id
    #####################################################################################

    # The RNTI serves as a temporal identifier for a connection. When a connection ends, the base station (BS) reuses
    # the same RNTI. Consequently, in the file generated by the LTE analyzer, multiple connections may share the same RNTI.
    # To establish a unique identification for these connections throughout the measurement campaign, this section appends
    # a unique connection identifier to the DCI messages.
    # In this section, a 'connection_id' is added to each new RRC connection based on the terminal's inactivity time.
    # We consider that for a specific RNTI, if no DCI messages are received for a duration longer than the inactivity timer
    # parameter, the connection is terminated by the eNB. Therefore, if the same RNTI reappears, it will be treated as
    # a new connection. The inactivity timer parameter is typically set to a few seconds. Bouygues uses up to 12 seconds,
    # while other mobile network operators (MNOs) use shorter values. We assume that if there's a silence period
    # of up to 20 seconds, we consider the connection to have terminated.

    # For the reserved RNTI values, we use the following IDs:
    # RA-RNTI: connection_id = 1
    # P-RNTI: connection_id = 2
    # SI-RNTI: connection_id = 3

    if adding_connection_id:

        # Initialize variables and data structures
        connection_nb = 3
        is_first_chunk = True

        # Create a DataFrame to store the last time and connection_id for each CRNTI
        hist_crnti = pd.DataFrame(np.zeros((65536, 2)).astype('int'), columns=['last_time', 'connection_id'])

        for df in pd.read_csv(PATH_filter, chunksize=100000, low_memory=False):
            # Remove unnecessary columns
            df = df.drop(['nb_cce', 'ncce', 'L', 'nof_bits', 'dci_payload'], axis=1)

            # Sort the DataFrame by 'rnti' and 'Time'
            df = df.sort_values(['rnti', 'Time']).reset_index(drop=True)
            df['connection_id'] = 0

            # Create a list of unique 'rnti' values in the subframe
            rnti_list = df['rnti'].unique()

            for rnti in rnti_list:
                if rnti < 10:
                    # RA-RNTI: Set connection_id to 1
                    df.loc[df['rnti'] == rnti, 'connection_id'] = 1
                elif rnti == 65534:
                    # P-RNTI: Set connection_id to 2
                    df.loc[df['rnti'] == rnti, 'connection_id'] = 2
                elif rnti == 65535:
                    # SI-RNTI: Set connection_id to 3
                    df.loc[df['rnti'] == rnti, 'connection_id'] = 3
                else:
                    # CRNTI
                    t0 = df.loc[df['rnti'] == rnti, 'Time'].iloc[0]
                    dif = t0 - hist_crnti['last_time'].iloc[rnti]

                    if dif >= inactivity_timer:
                        # New connection: Increment connection_nb and assign the new connection_id
                        connection_nb += 1
                        connection_id = connection_nb
                    else:
                        # Reuse the previous connection_id
                        connection_id = hist_crnti['connection_id'].iloc[rnti]

                    # Assign the connection_id to the appropriate rows
                    df.loc[df['rnti'] == rnti, 'connection_id'] = connection_id

                    # Handle cases with multiple connections in the current DataFrame
                    temp = df.loc[df['rnti'] == rnti].copy()
                    temp['diff'] = temp['Time'].diff().dropna()
                    dci_new_connect = temp[temp['diff'] > inactivity_timer]

                    if len(dci_new_connect) >= 1:
                        for j in range(len(dci_new_connect)):
                            connection_nb += 1
                            connection_id = connection_nb
                            df.loc[(df['rnti'] == rnti) & (df['Time'] >= dci_new_connect['Time'].iloc[j]), 'connection_id'] = connection_id

                    # Update the last_time and connection_id for the current CRNTI in hist_crnti
                    hist_crnti.at[rnti, 'last_time'] = df.loc[df['rnti'] == rnti, 'Time'].iloc[-1]
                    hist_crnti.at[rnti, 'connection_id'] = connection_id

            df = df.sort_values('Time').reset_index(drop=True)
            # Save the trace
            output_file = TraceName + '_with_id.csv'
            if is_first_chunk:
                df.to_csv(TraceName + '_with_id.csv', mode='w', header=True, index=False)
                is_first_chunk = False
            else:
                df.to_csv(TraceName + '_with_id.csv', mode='a', header=False, index=False)

    # Clean up temporary CSV files
    os.remove(PATH_corrected)
    os.remove(PATH_dci)
    os.remove(PATH_filter)

    print("DCI decoding was successful!")
    print("A new CSV file was created: " + output_file)

if __name__ == "__main__":
    main()